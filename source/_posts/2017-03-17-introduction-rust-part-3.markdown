
---
layout: post
title: "Introduction au langage de programmation Rust - Partie 3"
date: 2017-03-17 21:32
comments: true
published: true
categories: [rust, development, tutorial]
---

> Initialement publi√© sur [https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-3](https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-3)

Apr√®s avoir vu comment installer le compilateur Rust et Cargo, puis √©crit quelques lignes de code dans la (seconde partie de cette introduction](/introduction-rust-part-2/), nous allons continuer dans cette troisi√®me partie √† faire √©voluer notre programme en d√©couvrant de nouvelles caract√©ristiques de Rust.

Avant de nous lancer, rappelez-vous, une nouvelle version de Rust est publi√©e toutes les six semaines ; il est donc tr√®s probable que la version que vous avez install√©e est d√©j√† obsol√®te.

Mettez √† jour Rustup lui-m√™me, puis ensuite Rust :

```
$ rustup self update // mise √† jour de Rustup
 ...
$ rustup update // mise √† jour de tous les canaux de Rust install√©s
```

Pensez √† effectuer r√©guli√®rement ces op√©rations : une version √† jour de Rust vous donne acc√®s √† de nouvelles fonctionnalit√©s et une meilleure compatibilit√© avec les librairies de la communaut√©.

## `Struct` et `trait`

Notre programme des deux premi√®res parties √©tait structur√© de mani√®re proc√©durale. Nous allons lui donner une allure plus lisible et plus encapsul√©e, pour ne pas dire plus "objet". Rust n‚Äôa pas pour autant des "classes" comme dans d‚Äôautres langages, mais des `struct` et des `trait`.

Comme leur nom l‚Äôindique, les struct sont des structures qui permettent de stocker un ensemble de donn√©es complexes ; on dira qu‚Äôune struct d√©finie un nouveau type. Notez qu‚Äôil n‚Äôy a pas de constructeur ou d‚Äôaccesseurs √† proprement parler comme dans d‚Äôautre langage, Rust reste tr√®s simple ici.

Faisons √©voluer notre programme en introduisant une *struct* :

```rust
struct Division {
  numerateur: i32,
  denominateur: i32,
}
```

La structure peut-√™tre ensuite instanci√©e et ses propri√©t√©s manipul√©es :

```rust
let une_division = Division {numerateur: 10, denominateur: 12};

println!("Une division ({} - {})", une_division.numerateur, une_division.denominateur);
```

Continuons notre logique d‚Äôencapsulation en ajoutant des m√©thodes √† notre structure. Ici, la syntaxe de Rust sort vraiment de l‚Äôordinaire. En effet, les m√©thodes ne sont pas ajout√©es directement dans le corps de la *struct*, mais d√©clar√©es o√π vous le souhaitez dans votre programme avec le mot-cl√© impl.

```rust
impl Division {
    fn calculer(&self) -> i32 {
        match self.denominateur {
            0 => panic!("Division par 0"),
            1 => self.numerateur,
            _ => self.numerateur / self.denominateur
        }
    }
}
```

Le code de la m√©thode calculer est repris de la m√©thode `calculer_division` vu dans la pr√©c√©dente partie de cet article.

Il est tentant de penser qu‚Äôon peut faire n‚Äôimporte quoi, comme en Javascript, √† savoir rajouter des m√©thodes √† n‚Äôimporte quelle *struct*, √©crite par vous ou fournie par le langage. Par exemple, en Javascript, on peut rajouter des m√©thodes au prototype `String` et les utiliser comme des m√©thodes du langage (cette capacit√© est notamment utilis√©e par tous les polyfills).

En Rust, il est impossible d‚Äôajouter des m√©thodes √† n‚Äôimporte quelle *struct* ; les `impl` doivent √™tre d√©clar√©s dans le m√™me module (`crates` en Rust) que la *struct*.

Mettez √† jour votre programme Rust :

- d√©clarer le nouveau type `Division` √† l‚Äôaide d‚Äôune *struct*
- remplacer la d√©claration de la m√©thode statique `calculer_division` par une m√©thode `calculer` qui impl√©mente le type `Division` (attention √† la signature de la m√©thode `calculer`)
- remplacer l‚Äôappel √† la m√©thode `calculer_division` par l‚Äôinstanciation du type `Division` avec le param√®tre qui vient de l‚Äôanalyse de la ligne de commande, puis calculer le r√©sultat et l‚Äôafficher.

A ce stade, vous devez avoir un programme qui compile et s‚Äôex√©cute, ce que vous pouvez v√©rifier √† l‚Äôaide de la commande `cargo run 4` (code complet [https://git.io/v1XJL](https://git.io/v1XJL)).

S‚Äôil n‚Äôexiste pas de "vrai" constructeur en Rust, les us et coutumes du langage encouragent cependant l‚Äôencapsulation de l‚Äôop√©ration d‚Äôinstanciation d‚Äôun type au sein d‚Äôune fonction statique d√©clar√©e dans l‚Äôimpl√©mentation de la struct elle-m√™me, nomm√©e par convention `new` et qui retourne √©videmment une instance de votre type. Ce qui donne pour `Division` :

```rust
impl Division {
    fn new(x: i32, y: i32) -> Division {
        Division {
            numerateur: x,
            denominateur: y,
        }
    }
    ...
}
```

Pensez √† remplacer l‚Äôinstanciation manuelle de `Division` dans votre programme par l‚Äôusage de la fonction `new` (code complet https://git.io/v1XLo).

Outre les `struct`, Rust propose un autre m√©canisme qui permet d‚Äôindiquer au compilateur les fonctionnalit√©s qu‚Äôun type doit obligatoirement fournir : les `trait`. Par exemple, si nous souhaitons constraindre la fa√ßon dont une Division doit d√©clarer le symbole qu‚Äôelle repr√©sente, nous pouvons d√©clarer le *trait* suivant :

```rust
trait HasSymbol {
    fn symbol(&self) -> String;
}
```

Les *traits* ressemblent aux interfaces Java ou C#, avec globalement les m√™mes caract√©ristiques :

- ensemble de fonctions que le type doit obligatoirement red√©finir
- certaines fonctions peuvent avoir une impl√©mentation par d√©faut
- un *trait* peut impl√©menter un autre *trait*, et donc "h√©riter" de ses caract√©ristiques (concr√®tement, il faudra impl√©menter les deux traits sur votre type)

Impl√©mentons notre *trait* pour la Division :

```rust
impl HasSymbol for Division {
    fn symbol(&self) -> String {
        "/".to_string() // "/" est du type &str, qu'il faut donc convertir
    }
}
```

Notez ce point important, impossible en Java par exemple : impl√©menter un *trait* pour un type est une section de code d√©clar√©e a posteriori de la d√©claration de ce type, ce qui veut dire qu‚Äôun nouveau *trait *peut enrichir retrospectivement un type existant (avec quelques restrictions cependant).

D√©sormais, il est possible de tracer le symbole de la `Division`, juste apr√®s sa construction par exemple :

```rust
let division = Division::new(numerateur, 2);
println!("Symbole : {}", division.symbol());
```

Le r√©sultat d‚Äôex√©cution de votre programme est d√©sormais enrichi du symbole de la Division (code complet [https://git.io/v1X4I](https://git.io/v1X4I)) :

```
$ cargo run 2
    Running `target/debug/division 2`
Symbole: /
R√©sultat : 1
```

## Encore quelques concepts √† ma√Ætriser par le Rustac√©en qui d√©bute

Vous vous en souvenez peut-√™tre, je vous avais promis dans la premi√®re partie de cet article de la sueur, en particulier avec la gestion de la m√©moire : elle n‚Äôest ni √† la charge du d√©veloppeur, ni √† la charge d‚Äôune machine virtuelle et de son ramasse-miette.

Il est temps de mettre les mains dans le camboui et de transpirer. Accrochez-vous !

Reprenons le code d√©crit plus haut, et ajoutons-y une instruction qui para√Æt anodine :

```rust
let division = Division::new(numerateur, 2);
let division2 = division; // <= instruction anodine :-)
println!("Symbole : {}", division.symbol());
```

Que se passe-t-il √† la compilation (`cargo build`) ?

```
error[E0382]: use of moved value: `division`
  --> src/main.rs:48:30
  |
47 |     let division2 = division;
  |         --------- value moved here
48 |     println!("Symbole : {}", division.symbol());
  |                              ^^^^^^^^ value used here after move
  |
  = note: move occurs because `division` has type `Division`, which
  does not implement the `Copy` trait
```

Le compilateur Rust vous indique que la valeur point√©e par la variable division est d√©plac√©e (*moved*). En effet, une valeur ne peut √™tre r√©f√©renc√©e que par une seule variable dans tout notre code. C‚Äôest le concept de possession (*ownership*), contr√¥l√©e √† la lettre par le compilateur, qui va garantir la s√©curit√© et la robustesse d‚Äôex√©cution d‚Äôun programme Rust. Nous avons d√©plac√© la possession de la valeur de division vers division2, par cons√©quent, division ne peut plus √™tre utilis√©e.

Qui dit "possession", dit "emprunt" (*borrowing*) ou "copie" et pour illustrer l‚Äôune ou l‚Äôautre des solutions, nous allons introduire une nouvelle fonction statique et l‚Äôutiliser (code complet [https://git.io/v1X2m](https://git.io/v1X2m)):

```rust
fn display_symbol(division: Division) {
    println!("Symbole: {}", division.symbol());
}
...
let division = Division::new(numerateur, 2);
display_symbol(division); // <= √† la place du 'let division2 = ...'
```

Ce code ne compile pas et vous optenez un message d‚Äôerreur tr√®s similaire au pr√©c√©dent. Trois solutions pour r√©soudre cette erreur de compilation s‚Äôoffrent √† nous :

1/ Ne plus utiliser la variable division apr√®s l‚Äôappel √† la m√©thode `display_symbol`

2/ Copier toute la valeur de la variable

3/ Permettre l‚Äôemprunt de la variable et utiliser sa r√©f√©rence

La solution 1/ est une fa√ßon de mettre le probl√®me sous le tapis ou de le repousser, ce n‚Äôest pas vraiment une solution (m√™me si le programme compilera effectivement üòâ

Copier toute la valeur de la variable (solution 2) est une fa√ßon int√©ressante de r√©soudre le probl√®me. Dans cette solution, la valeur de la variable est enti√®rement copi√©e lors de l‚Äôappel √† la fonction. Notez bien qu‚Äôil n‚Äôy a donc plus de lien entre la variable d√©clar√©e avant l‚Äôappel de la fonction et la variable utilis√©e dans la fonction.

Pour d√©clarer un type "copiable", il suffit d‚Äôimpl√©menter le *trait* `Copy`, ainsi que le *trait* `Clone` dont h√©rite `Copy`. Le plus simple, est d‚Äôutiliser l‚Äôimpl√©mentation automatique de certains traits, propos√©e par l‚Äôattribut `#[derive(...)]` (documentation : [https://bit.ly/2hASRHt](https://bit.ly/2hASRHt)), √† appliquer directement sur un type :

```rust
#[derive(Copy, Clone)]
Division {
  ...
```

Avec cet ajout, notre programme compile de nouveau (code complet [https://git.io/v11tL](https://git.io/v11tL)). Cependant, si cette solution peut sembler magique et simple (et de plus propos√©e par le compilateur), elle a ausi ses limites :

- un type peut impl√©menter `Copy` uniquement si l‚Äôensemble de ses composants impl√©mente aussi `Copy` (dans notre exemple, `i32` impl√©mente `Copy`, donc `Division` peut impl√©menter `Copy`). Pour les Javaistes, on retrouve ici une propri√©t√© √©quivalente dans l‚Äôesprit aux objets s√©rialisables
- un certain nombre de types n‚Äôimpl√©mentent pas `Copy` ; par oubli du d√©veloppeur ou par incompatibililt√© technique. Par exemple, les `String` ne sont pas compatibles avec `Copy`.

La troisi√®me et derni√®re solution s‚Äôapplique donc √† tous les autres cas. Elle s‚Äôappuie sur le principe de l‚Äôemprunt, √† savoir qu‚Äôon va passer √† notre fonction non pas la valeur d‚Äôune variable, mais une r√©f√©rence vers la valeur de cette variable.

Concr√®tement, il faut faire √©voluer la signature de notre fonction d‚Äôaffichage pour permettre l‚Äôemprunt et l‚Äôusage de r√©f√©rence :

```rust
fn display_symbol(division: &Division) { // <= Notez le & ici
    ...
}
...
let division = Division::new(numerateur, 2);
display_symbol(&division); // <= Notez le & ici
```

La fonction `display_symbol` attend une r√©f√©rence vers un type `Division`, identifi√©e par le symbole `&` et nous pouvons passer la r√©f√©rence vers une valeur en ajoutant le m√™me symbole devant le nom d‚Äôune variable (code complet [https://git.io/v11ml](https://git.io/v11ml)). Cette solution est la plus universelle, au prix d‚Äôune complexit√© intellectuelle plus √©lev√©e.

Finalement, gr√¢ce √† ces diff√©rents m√©canismes, le cycle de vie de toutes les donn√©es r√©f√©renc√©es par des variables, est connu d√®s la compilation de votre programme, ce qui garantit une bonne gestion de la m√©moire et donc une certaine robustesse. En revanche, elle vous garantit aussi quelques "combats" contre le borrow checker du compilateur Rust.

## Conclusion

Au cours de ces trois articles d‚Äôintroduction √† Rust, nous avons abord√©s les outils et les concepts les plus importants du langage : *struct*, *trait*, *pattern matching*, *enum*, possession (*ownership*), emprunt (*borrowing*), notions de programmation fonctionnelle ... Ces connaissances devraient √™tre suffisantes pour √©crire vos premiers programmes avec Rust.

Vous d√©couvrirez par vous-m√™me des concepts plus avanc√©s du langage comme les *lifetimes*, les types g√©n√©riques, les modules et les *crates*, les *macros*, les tests, les it√©rateurs, la concurrence, la gestion des erreurs ... La lecture du livre "The Rust programming language" sera donc √† ce propos un bon point de d√©part pour vous : [https://doc.rust-lang.org/book/](https://doc.rust-lang.org/book/). Enfin, tous ces concepts pourraient faire l‚Äôobjet d‚Äôarticles d√©di√©s, avis donc aux amateurs !
