<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: playframework | ECT]]></title>
  <link href="https://blog.dlecan.com//blog/categories/playframework/atom.xml" rel="self"/>
  <link href="https://blog.dlecan.com//"/>
  <updated>2021-05-25T08:45:26+00:00</updated>
  <id>https://blog.dlecan.com//</id>
  <author>
    <name><![CDATA[Damien Lecan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redeemable promises avec Play Framework]]></title>
    <link href="https://blog.dlecan.com//redeemable-promises-avec-play-framework/"/>
    <updated>2014-11-15T22:34:00+00:00</updated>
    <id>https://blog.dlecan.com//redeemable-promises-avec-play-framework</id>
    <content type="html"><![CDATA[<p>J'ai eu à intervenir récemment sur un programme écrit en Play Framework v2.3, dont le rôle est assez simple : faire passe-plat entre un client et un serveur et effectuant notamment des transformations protocolaires (comme REST vers TCP par exemple). Ce qui m'a donné l'occasion d'utiliser les <a href="https://www.playframework.com/documentation/2.4.x/api/java/play/libs/F.RedeemablePromise.html">RedeemablePromise</a> de Play Framework, pas du tout documentées à ce jour.</p>

<h2>Client asynchrone</h2>

<p>Les différents échanges de messages entre les systèmes peuvent être représentés à l'aide du diagramme de séquence suivant :</p>

<p></p>

<p><img class="center" src="http://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgQ2xpZW50IGFzeW5jaHJvbmUKCgANBi0-UGFzc2VQbGF0OlBPU1QgbWVzc2FnZQoADgktPlNlcnZldXI6c2VuZAAXCQAOBy0ANQwgYWNrAC4LLT4AcQY6IDIwMAAXBQpub3RlIG92ZXIAgQsHLAB1CSwAXgggUGx1cyB0YXJkLCB1bgCBCAggZGUgcmV0b3VyCgByCQBuDHJlc3BvbnMAgSsNAHYIAIFTBQAYCQCBcQcAgSsNAIEYCACBMAwAgQcJYWNr&amp;s=modern-blue"></p>

<p>Le programme en Play Framework est nommé "PassePlat" dans ce diagramme.</p>

<p>Les messages montants sont implémentés sous forme d'une API RESTful ; tandis que le retour du "Serveur", asynchrone, est implémentée avec des <em>callbacks</em> et une requête REST vers le client d'origine. Voici un exemple de pseudo-code Java sur le traitement du message de retour :</p>

<p>``` java
...
/<em>*
 * Receive responses from "server"
 </em>/
public class ServerReceiver {</p>

<pre><code>public void onServerResponse(Response response) {
    // Utilisation de la librairie play.libs.ws.WS
    // pour effectuer des appels REST
    WS.url("http://client_url/api/response")
        .setContentType("application/json")
        .post(response.asJson());
}

public void onServerError(Throwable error) {
    WS.url("http://client_url/api/response")
        .setContentType("application/json")
        // Serialize exception as JSON
        .post(Helper.asJson(error);
}
</code></pre>

<p>}
...</p>

<p>```</p>

<p>Le système complet fonctionne bien, mais n'est pas très satisfaisant :</p>

<ul>
<li><p>le Client et le PassePlat sont très couplés. En effet, le Client doit connaître l'adresse du PassePlat pour lui envoyer les messages montants et le PassePlat doit connaitre l'adresse du Client pour lui renvoyer le message de retour. Bref, une dépendance cyclique ;</p></li>
<li><p>Le fonctionnement du Serveur est asynchrone (messages montants et de retours sont décorrélés) et cette implémentation a déporté l'asynchronisme jusqu'au Client, alors que le client (l'humain cette fois-ci :-) voulait plutôt un fonctionnement synchrone du Client, ce qui était plus facile à appréhender pour lui.</p></li>
</ul>


<h2>Client synchrone</h2>

<p>Nous avons donc travaillés sur une implémentation du système plutôt comme ceci :</p>

<p></p>

<p><img class="center" src="http://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgQ2xpZW50IHN5bmNocm9uZQoKAAwGLT5QYXNzZVBsYXQ6UE9TVCBtZXNzYWdlCgAOCS0-U2VydmV1cjpzZW5kABcJAA4HLQA1DCBhY2sKCm5vdGUgb3ZlcgBuBywAWQksAEIIIFBsdXMgdGFyZCwgdW4AbAggZGUgcmV0b3VyCgBWCQBSDHJlc3BvbnMAgRAMLT4AgVMGOiAyMDAAGAkgKwCBBQUAgTATADsJQWNr&amp;s=modern-blue"></p>

<p>L'appel du Client vers le PassePlat est donc bloqué tant que l'acquittement <strong>et</strong> la réponse du Serveur ne sont pas parvenus au PassePlat.</p>

<h3>Comment ?</h3>

<p>On peut faire cela très simplement avec les <a href="https://www.playframework.com/documentation/2.4.x/api/java/play/libs/F.RedeemablePromise.html">RedeemablePromise</a> de Play Framework.</p>

<p>Les <a href="https://www.playframework.com/documentation/2.4.x/api/java/play/libs/F.RedeemablePromise.html">RedeemablePromise</a> sont une implémentation du design pattern <em>promise</em>, désormais répandu dans l'informatique pour résoudre le <a href="http://callbackhell.com/"><em>callback hell</em></a> -l'enfer des callbacks-, problème très fréquent avec la programmation asynchrone. En effet, votre code est exécuté au sein de <em>callbacks</em> en réponse à des évènements : fin de traitement, lecture d'un fichier, arrivée d'un message par Web Socket, ...</p>

<p>On trouve des implémentations de ce pattern naturellement en <a href="https://www.promisejs.org/">Javascript</a> (<a href="https://docs.angularjs.org/api/ng/service/$q">plusieurs même</a>), mais aussi en <a href="http://docs.scala-lang.org/overviews/core/futures.html">Scala</a>, en <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">Java</a>, ...</p>

<p>Voyons comment nous pouvons les utiliser pour répondre à notre nouveau besoin.</p>

<p>Adaptons la classe qui réceptionne les évènements venant du Serveur :</p>

<p>``` java
...
/<em>*
 * Receive responses from "server"
 </em>/
public class ServerReceiver {</p>

<pre><code>// Initialisation de la promesse, à vide
private RedeemablePromise&lt;Response&gt; promise = RedeemablePromise.empty();

// get/set

public void onServerResponse(Response response) {
    // La promesse est résolue ou complétée avec succès ici
    promise.success(response);
}

public void onServerError(Throwable error) {
    // La promesse est résolue ou complétée en erreur avec l'exception
    promise.failure(error);
}
</code></pre>

<p>}
...
```</p>

<p>L'élément clé ici est le fait de "résoudre" ou "compléter" la promesse en succès ou en erreur selon le cas. Attention à n'oublier aucun cas de fin de traitement du Serveur, sinon le Client restera bloqué dans ces cas non prévus.</p>

<p>Jetons maintenant un coup d'oeil au contrôleur REST sur le PassePlat qui reçoit les requêtes HTTP depuis le Client et qui "bloque" tant que la réponse du Serveur n'est pas parvenue :</p>

<p>``` java
...
public static Promise<Result> sendMessage(...) {</p>

<pre><code>// Envoi du message entrant vers le serveur
// server.send(message)

ServerReceiver serverReceiver = new ServerReceiver();

// Ecoute des messages retour
server.listen(serverReceiver);

return
    // Promesse de type Promise&lt;Response&gt;
    serverReceiver.getPromise()
    // Conversion 'success' en Promise&lt;Result&gt;
    .map(response -&gt;
        ok(JSON.toJson(response));
    );
</code></pre>

<p>}
...
```</p>

<p>Dans le cas nominal, la <code>Response</code> sera convertie en <code>Result</code> au sein de la méthode <code>map</code> (programmation fonctionnelle).</p>

<p>Et dans le cas où la promesse a été résolue en erreur ?
Par défaut, Play va générer une réponse HTTP avec un code retour 500 et une sérialisation de l'exception renvoyée. Si vous souhaitez définir vous-même votre propre retour, il faut que le traitement de l'erreur génère un <code>Result</code> standard.</p>

<p>Voici comment adapter la transformation de la promesse pour renvoyer une erreur 500 et une sérialisation de l'exception en cas de promesse résolue en erreur :</p>

<p>``` java
...
return</p>

<pre><code>// Promesse de type Promise&lt;Response&gt;
promise
// Conversion 'success' en Promise&lt;Result&gt;
.map(response -&gt;
    ok(Json.toJson(response));
)
// Conversion 'failure' en Promise&lt;Result&gt;
.recover(error -&gt;
    // Serialize exception as JSON
    // and send HTTP 500 status
    internalServerError(Json.toJson(error));
);
</code></pre>

<p>```</p>

<p>Au final, nous avons pu rendre l'appel du Client synchrone en à peine quelques lignes de code grâce à l'API riche de Play Framework.
Enfin, vous remarquerez que Java 8 améliore significativement la lisibilité du code. Cependant, on reste loin de Scala, de Groovy ou tout simplement de Javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurer Play Framework 2.x avec un repository Artifactory]]></title>
    <link href="https://blog.dlecan.com//configurer-play-framework-repository-artifactory/"/>
    <updated>2013-06-03T10:44:00+00:00</updated>
    <id>https://blog.dlecan.com//configurer-play-framework-repository-artifactory</id>
    <content type="html"><![CDATA[<p>[Play Framework[(play2] utilise <a href="http://www.scala-sbt.org/">Scala SBT</a> comme outil de build depuis la version 2.0. <em>A la Maven</em>, il télécharge les dépendances
de votre projet Play Framework depuis des dépôts centralisés, comme <a href="http://repo1.maven.org/maven2/">Maven Central</a>.</p>

<p>Cette technique est très intéressante, mais il faut bien tenir compte des inconvénients induits :</p>

<ol>
<li><p>Pas de maîtrise des dépendances ou des dépôts configurés par les développeurs : on télécharge n'importe quoi depuis n'importe où</p></li>
<li><p>Gâchi de bande passante / latence : chaque développeur télécharge chaque dépendance depuis Internet, là où une mutualisation depuis un
serveur localisé dans le réseau de l'entreprise ferait économiser de la bande passante et gagner en réactivité (latence réduite)</p></li>
<li><p>Vous ne pouvez pas dépendre d'artifacts uniquement internes à votre entreprise (sans les publier sur Internet)</p></li>
</ol>


<p>En entreprise, 1/ est généralement résolu par "blocage naturel" : on ne peut pas télécharger depuis Internet. 2/ et 3/ peuvent se résoudre à l'aide d'un serveur proxy dédié à Maven, SBT, ... comme <a href="http://www.sonatype.org/nexus/">Sonatype Nexus</a> ou <a href="http://www.jfrog.com/home/v_artifactory_opensource_overview">JFrog Artifactory</a>.</p>

<p>Comment paramétrer Play Framework pour utiliser Artifactory ?</p>

<p>[J'ai déjà expliqué comment configurer SBT pour utiliser Artifactory][/configurer-scala-sbt-repository-artifactory/], mais, bien que Play Framework utilise SBT, ces explications ne s'y appliquent pas (pour le moment). SBT étant embarqué dans Play Framework, il ne lit pas les instructions de configuration fournies en ligne de commande.</p>

<p>Pas de différence du côté d'Artifactory en revanche.</p>

<p>Par la suite, je suppose que la variable <code>PLAY_HOME</code> pointe vers votre installation de Play Framework 2.x.</p>

<h2>Configurer SBT pour lire les dépôts "miroirs"</h2>

<p>Créez le fichier <code>~/sbt/.repositories</code> avec le contenu suivant :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/sbt/.repositories </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[repositories]
</span><span class='line'>  local
</span><span class='line'>  maven-local
</span><span class='line'>  ivy-proxy-releases: http://localhost:8180/artifactory/ivy-remote-repos/, [organization]/[module]/(scala&lt;em>[scalaVersion]/)(sbt&lt;/em>[sbtVersion]/)[revision]/[type]s/&lt;a href="-[classifier]">artifact&lt;/a>.[ext]
</span><span class='line'>  maven-proxy-releases: http://localhost:8180/artifactory/maven-remote-repos/</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ce fichier indique à SBT l'ensemble des dépôts qu'il peut consulter pour résoudre les dépendances :</p>

<ul>
<li><p><code>local</code> : dépôt Ivy local par défaut, localisé dans <code>~/.ivy2/</code></p></li>
<li><p><code>maven-local</code> : dépôt Maven local par défaut, localisé dans <code>~/.m2/repository/</code></p></li>
<li><p><code>ivy-proxy-releases</code> : suivi d'une URL et d'un pattern, on indique à SBT qu'il pourra trouver les artifacts qui respectent ce pattern dans ce dépôts (pattern Ivy)</p></li>
<li><p><code>maven-proxy-releases</code> : suivi d'une URL, le dépôt au format Maven pour les autres dépendances</p></li>
</ul>


<h2>Forcer Play Framework à lire le fichier <code>~/sbt/.repositories</code></h2>

<p>Éditez le fichier <code>$PLAY_HOME/framework/sbt/sbt.boot.properties</code> et complétez le bloc suivant :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$PLAY_HOME/framework/sbt/sbt.boot.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">[ivy]</span>
</span><span class='line'>  <span class="na">ivy-home</span><span class="o">:</span> <span class="s">${play.home}/../repository&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>De cette manière :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$PLAY_HOME/framework/sbt/sbt.boot.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">[ivy]</span>
</span><span class='line'>  <span class="na">ivy-home</span><span class="o">:</span> <span class="s">${play.home}/../repository</span>
</span><span class='line'>  <span class="na">override-build-repos</span><span class="o">:</span> <span class="s">${sbt.override.build.repos-true}</span>
</span><span class='line'>  <span class="na">repository-config</span><span class="o">:</span> <span class="s">${sbt.global.base-${user.home}/.sbt}/repositories&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Avec ces deux instructions, on force Play Framework à utiliser uniquement les dépôts configurés dans le fichier <code>~/sbt/.repositories</code>.</p>

<h2>Tester</h2>

<p>Commencez par nettoyer votre dépôt local de cache de Play Framework (par précaution, je vous propose de simplement le déplacer) :</p>

<p>```sh
mv $PLAY_HOME/repository/cache $PLAY_HOME/repository/cache.old</p>

<p>```</p>

<p>Postionnez-vous dans un projet Play, et testez :</p>

<p>```sh
dlecan@portable:~/dev/projet_test$ play
[info] Loading global plugins from /home/dlecan/.sbt/plugins
[info] Updating {file:/home/dlecan/.sbt/plugins/}default-ccfcd1...
[info] Resolving org.scala-sbt#precompiled-2_10_0;0.12.2 ...
[info] downloading http://localhost:8180/artifactory/ivy-remote-repos/com.typesafe.sbt/sbt-pgp/scala_2.9.2/sbt_0.12/0.8/jars/sbt-pgp.jar ...
[info]  [SUCCESSFUL ] com.typesafe.sbt#sbt-pgp;0.8!sbt-pgp.jar (50ms)
[info] downloading http://localhost:8180/artifactory/maven-remote-repos/com/github/mpeltonen/sbt-idea_2.9.2_0.12/1.4.0/sbt-idea-1.4.0.jar ...
[info]  [SUCCESSFUL ] com.github.mpeltonen#sbt-idea;1.4.0!sbt-idea.jar (37ms)
[info] downloading http://localhost:8180/artifactory/maven-remote-repos/com/jsuereth/gpg-library_2.9.2/0.8/gpg-library_2.9.2-0.8.jar ...
[info]  [SUCCESSFUL ] com.jsuereth#gpg-library_2.9.2;0.8!gpg-library_2.9.2.jar (29ms)
[info] downloading http://localhost:8180/artifactory/maven-remote-repos/org/bouncycastle/bcpg-jdk16/1.46/bcpg-jdk16-1.46.jar ...
[info]  [SUCCESSFUL ] org.bouncycastle#bcpg-jdk16;1.46!bcpg-jdk16.jar (21ms)
[info] downloading http://localhost:8180/artifactory/maven-remote-repos/org/bouncycastle/bcprov-jdk16/1.46/bcprov-jdk16-1.46.jar ...
[info]  [SUCCESSFUL ] org.bouncycastle#bcprov-jdk16;1.46!bcprov-jdk16.jar (41ms)
[info] Done updating.
[info] Loading project definition from /home/dlecan/dev/truc/project
[info] Set current project to truc (in build file:/home/dlecan/dev/truc/)</p>

<pre><code>   _            _
</code></pre>

<p> _ <strong> | | </strong> _ _  <em>| |
| '</em> \| |/ <em>' | || |</em>|
|  <strong>/|<em>|_</em></strong>|_<em> (</em>)
|_|            |__/</p>

<p>play! 2.1.1 (using Java 1.7.0_21 and Scala 2.10.0), http://www.playframework.org</p>

<blockquote><p>Type "help play" or "license" for more information.
Type "exit" or use Ctrl+D to leave this console.</p></blockquote>

<p>[projet_test] $</p>

<p>```</p>

<p>Les dépendances sont téléchargées depuis <code>http://localhost:8180/...</code>, comme voulu.</p>

<p>Note : l'affichage obtenu peut varier selon vos dépendances paramétrées.</p>
]]></content>
  </entry>
  
</feed>
