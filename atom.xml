<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ECT]]></title>
  <link href="https://blog.dlecan.com//atom.xml" rel="self"/>
  <link href="https://blog.dlecan.com//"/>
  <updated>2021-05-25T08:45:26+00:00</updated>
  <id>https://blog.dlecan.com//</id>
  <author>
    <name><![CDATA[Damien Lecan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serious game 'Jouons √† la Blockchain' pour l'inauguration de Novapuls]]></title>
    <link href="https://blog.dlecan.com//inauguration-novapuls-jouons-blockchain/"/>
    <updated>2018-12-10T15:00:00+00:00</updated>
    <id>https://blog.dlecan.com//inauguration-novapuls-jouons-blockchain</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/lauremerlin">Laure Merlin</a> et moi avons anim√© un <em>serious game</em> grandeur nature sur le th√®me de la Blockchain pour l&#8217;inauguration de <a href="http://novapuls.fr/">l&#8217;incubateur de start-ups nantais Novapuls</a> mercredi 05 d√©cembre 2018 : Jouons √† la Blockchain.</p>

<p>Par groupe de 4-6 personnes, la quarantaine de participants a jou√© √† la Blockchain avec des Legos : miner par preuve de travail (Proof-of-Work - PoW) ou preuve de possession (Proof-of-Stake - PoS), diffuser des informations ou des blocs, enregistrer des informations, r√©sister √† des <em>hacks</em>, executer des *smart-contracts&#8221; &#8230; tout le monde s&#8217;est pris au jeu !</p>

<p>Quelques images :</p>

<p><a href="https://www.linkedin.com/feed/update/urn:li:activity:6476009903461924864">
<img class="center" src="https://media-exp1.licdn.com/dms/image/C5622AQE7_rMYVO9Hdw/feedshare-shrink_800/0?e=1606953600&v=beta&t=57z02jMKwepOuBYGEnYjEMj_jgPqvaotIRUjrZnoDP0" title="Damien Lecan √† Novapuls sur un post linkedIn" >
</a></p>

<blockquote><p>[Inauguration <a href="https://twitter.com/Novapuls_ouest">@Novapuls_ouest</a> ] Tout comprendre sur la <a href="https://twitter.com/hashtag/blockchain">#blockchain</a> avec <a href="https://twitter.com/lauremerlin">@lauremerlin</a> et <a href="https://twitter.com/dlecan">@dlecan</a>. Jouons aux legos chez <a href="https://twitter.com/SoderoGestion">@SoderoGestion</a> pour comprendre le noeud, le bloc, le minage, la fraude, le smart contract,&#8230;</p><p><img class="center" src="https://blog.dlecan.com//images/2018-12-jouons-blockchain-1.jpg"></p><footer><strong>Am√©lie Andr√© (@Amelie_novapuls)</strong> <cite><a href='https://twitter.com/Amelie_novapuls/status/1070236752076517376'>twitter.com/Amelie_novapuls/&hellip;</a></cite></footer></blockquote>




<blockquote><p><a href="https://twitter.com/hashtag/Inauguration">#Inauguration</a> üöÄ l Atelier conf√©rence : Jouons ensemble √† la <a href="https://twitter.com/hashtag/Blockchain">#Blockchain</a> par <a href="https://twitter.com/dlecan">@dlecan</a> CTO de <a href="https://twitter.com/UnikName_UNS">@UnikName_UNS</a> et <a href="https://twitter.com/lauremerlin">@lauremerlin</a> CEO de <a href="https://twitter.com/ChainSpring">@ChainSpring</a> üòâ <a href="https://twitter.com/hashtag/startups">#startups</a> <a href="https://twitter.com/hashtag/cryptocurrency">#cryptocurrency</a></p><p><video width='' height='' preload='none' controls poster=''><source src='https://blog.dlecan.com//images/2018-12-jouons-blockchain-2.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p><footer><strong>Novapuls (@Novapuls_ouest)</strong> <cite><a href='https://twitter.com/Novapuls_ouest/status/1070233162565996544'>twitter.com/Novapuls_ouest/&hellip;</a></cite></footer></blockquote>


<p>Un succ√®s aux dires des participants et des organisateurs üòÖ</p>

<p>Merci au public pr√©sent et √† Novapuls pour sa confiance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keynote '√âtat de l'art des Blockchains & co.' √† Blockchain Paris 2018]]></title>
    <link href="https://blog.dlecan.com//keynote-blockchain-paris-etat-art/"/>
    <updated>2018-12-07T17:17:00+00:00</updated>
    <id>https://blog.dlecan.com//keynote-blockchain-paris-etat-art</id>
    <content type="html"><![CDATA[<p>J&#8217;ai pr√©sent√© la semaine derni√®re <a href="https://blockchainevent.fr/2018/speakers/damien-lecan/">la keynote &#8220;√âtat de l&#8217;art de Blockchain &amp; co.&#8221;</a> √† <a href="https://blockchainevent.fr/2018/">Blockchain Paris 2018</a> √† la Cit√© Universitaire Internationale. Ca a √©t√© l&#8217;occasion de revenir sur les bases de la Blockchain :</p>

<ul>
<li>ses valeurs : la confiance, qui vient de immuabilit√©, transparence, la d√©centralisation et la d√©sinterm√©diation</li>
<li>des mod√®les de gouvernance : publique, priv√©e, consortium &#8230;</li>
<li>un √©tat rapide du march√© et de ses entreprises</li>
<li>et de finir sur le challenge du moment : soutenir les entreprises du secteur malgr√© le contexte &#8220;crypto&#8221; morose (√ßa n&#8217;a aucun rapport, mais le b√©b√© part avec l&#8217;eau du bain en ce moment)</li>
</ul>


<h2>Les slides</h2>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSXfdvrmc3N6tSMAekUYySxawdomejhRfx9lzSzIshDqpAg7y-0KCAdnu723m7GdeTvrpc-WE4QqfqA/embed?start=false&loop=false&delayms=60000" frameborder="0" width="560" height="349" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Merci au public pr√©sent !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Another World, another Web' au Web2day 2018]]></title>
    <link href="https://blog.dlecan.com//web2day2018-another-world-another-web-decentralisation/"/>
    <updated>2018-06-13T09:13:00+00:00</updated>
    <id>https://blog.dlecan.com//web2day2018-another-world-another-web-decentralisation</id>
    <content type="html"><![CDATA[<p>Avec <a href="https://twitter.com/guiillaumeN">GuiillaumeN</a>, j&#8217;ai eu l&#8217;honneur de pr√©senter <a href="https://web2day.co/evenements/another-world-another-web/">&#8220;Another World, another Web&#8221; au Web2day 2018</a>, sur le th√®me du web d√©centralis√© et distribu√©.</p>

<h2>Le pitch</h2>

<blockquote><p>Vous r√™vez d‚Äôun site web √† la fois s√©curis√©, disponible h24/7j, fiable et respectueux de la vie priv√©e ?
Une architecture classique m√™lerait cloud, load-balancers, chiffrement ‚Ä¶ plut√¥t compliqu√© pour des besoins √©l√©mentaires.</p>

<p>Figurez vous qu‚Äôun autre monde existe d√©j√† et se trouve √† votre port√©e. Noms de domaines, stockage et distribution des fichiers, logique m√©tier d√©centralis√©e, navigateurs adapt√©s ‚Ä¶ nous allons tout vous pr√©senter !</p>

<p>Voyage dans un autre monde, au coeur du Web d√©centralis√©.</p></blockquote>

<h2>La vid√©o</h2>

<div class="embed-video-container"><iframe src="https://blog.dlecan.com///www.youtube.com/embed/_0hO9uKDlok" allowfullscreen></iframe></div>


<h2>Les slides</h2>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTVdjK6h78FPaYWS9C8d4In_LJt8dkaxe1RW2rkY6oUbF3nwDd9VH7jBVD2zU2hfD5BSSR1GtsCU7_Z/embed?start=false&loop=false&delayms=60000" frameborder="0" width="560" height="349" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Merci au public pr√©sent !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Smart-contracts under attack' au GDG Toulouse]]></title>
    <link href="https://blog.dlecan.com//meetup-gdg-toulouse-blockchain-smart-contract-security/"/>
    <updated>2018-06-06T11:10:00+00:00</updated>
    <id>https://blog.dlecan.com//meetup-gdg-toulouse-blockchain-smart-contract-security</id>
    <content type="html"><![CDATA[<p>J&#8217;ai √©t√© invit√© le 5 juin 2018 √† venir parler des <em>smart-contracts</em> Ethereum au <a href="https://www.meetup.com/fr-FR/GDG-Toulouse/events/250099870/">GDG Toulouse</a>.
Avec <a href="https://twitter.com/polo46">Paul Marty</a>, expert s√©curit√© chez Orange Cybers√©curit√©, nous avons orient√© notre pr√©sentation autour de la s√©curit√© des <em>smart-contracts</em>, avec une s√©ance de live-coding avec attaque en direct : moi, d√©veloppeur un peu naif, qui d√©ploie des <em>smart-contrats</em> sur Ethereum et Paul qui siphonne l&#8217;argent en temps r√©el üòÖ.</p>

<p>Une belle soir√©e sur Toulouse !</p>

<p>Les slides de notre pr√©sentation :</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSuT2L6_82F7WhApJ6Ehdgj41bzPSkBRlFSXrZoay5aVqmf45kgcX_8sfq53m_j8PubUdWl642bqWH0/embed?start=false&loop=false&delayms=60000" frameborder="0" width="560" height="349" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>La vid√©o :</p>

<div class="embed-video-container"><iframe src="https://blog.dlecan.com///www.youtube.com/embed/rQywiljTQdg" allowfullscreen></iframe></div>


<p>Merci au public pr√©sent !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Proof-of-Stake' au meetup Blockchain et Soci√©t√©]]></title>
    <link href="https://blog.dlecan.com//meetup-blockchain-proof-stake/"/>
    <updated>2018-05-18T09:13:00+00:00</updated>
    <id>https://blog.dlecan.com//meetup-blockchain-proof-stake</id>
    <content type="html"><![CDATA[<p>Hier soir, j&#8217;ai eu le plaisir de pr√©senter une conf√©rence √† base de g√¢teau Michel et Augustin ü§£ pr√©sentant la &#8220;Proof-Of-Stake&#8221; ou preuve d&#8217;enjeu <a href="https://www.meetup.com/fr-FR/Blockchain-Societe-Nantes/events/250342863/">meetup de mai</a> de l&#8217;association <a href="https://blockchainsociete.org">Blockchain et Soci√©t√©</a>.</p>

<blockquote><p>üçü Introduction √† la Proof-Of-Stake üçü</p><p>La Proof-Of-Work (PoW) est reine dans le domaine des blockchains publiques comme Bitcoin ou Ethereum, mais elle n&#8217;est pas sans inconv√©nients.<br/>La Proof-Of-Stake (PoS) est bien plac√©e pour remplacer la PoW, mais comment-fonctionne-t-elle ? Qu&#8217;apporte-t-elle ? Pourquoi n&#8217;a-t-elle pas remplac√© la PoW ?</p><p>Agenda :</p><p> - Introduction √† la PoS<br/> - Pr√©sentation de Qtum, une blockchain qui est mue nativement par la PoS.</p></blockquote>


<p>Une belle soir√©e !</p>

<p>Les slides de ma pr√©sentation :</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSZhUnxaXOfdtWbT-dsiIxsVIbmkQlwP09i4Hu7HfQ6NGxjD1l92gId5i6DuA30qTnrIxMOeE9sa41q/embed?start=false&loop=false&delayms=60000" frameborder="0" width="560" height="349" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Merci au public pr√©sent !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Web d√©centralis√©' au GDG Nantes]]></title>
    <link href="https://blog.dlecan.com//blockchain-decentralisation-tested-deployed-approved/"/>
    <updated>2018-01-23T23:47:00+00:00</updated>
    <id>https://blog.dlecan.com//blockchain-decentralisation-tested-deployed-approved</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/guiillaumeN">GuiillaumeN</a> et moi avons √©t√© invit√©s par le <a href="https://www.meetup.com/fr-FR/GDG-Nantes/">GDG Nantes</a> √† pr√©senter notre conf√©rence &#8220;Web d√©centralis√© : test√©, d√©ploy√©, approuv√© ‚úîÔ∏è !&#8221; fin janvier 2018.</p>

<h1>Web d√©centralis√© : test√©, d√©ploy√©, approuv√© ‚úîÔ∏è !</h1>

<p>Une belle occasion pour pr√©senter la notion de <a href="https://en.wikipedia.org/wiki/%C3%90">√ê</a>app, des applications Web d√©centralis√©es, √† la fois sur le code m√©tier (d√©)localis√© dans une blockchain <a href="https://en.wikipedia.org/wiki/Ethereum">Ethereum</a>, mais aussi sur tous les assets n√©cessaires √† l&#8217;application (Javacript, CSS, HTML &#8230;), (d√©)localis√©s eux dans un syst√®me de fichier r√©parti comme <a href="https://en.wikipedia.org/wiki/InterPlanetary_File_System">IPFS</a>.</p>

<p>Les slides de notre pr√©sentation :</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRg9iV-YbON8rNSH159OMZhuoExZ0pr4RZvoJ1Dx4gHTZoNkIJAuipC_nDQpwFSSfsSmqntAAY3bbbN/embed?start=false&loop=false&delayms=60000" frameborder="0" width="560" height="349" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Merci au public pr√©sent !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Ethereum de A √† Z' au meetup Blockchain et Soci√©t√©]]></title>
    <link href="https://blog.dlecan.com//meetup-blockchain-ethereum-a-z/"/>
    <updated>2017-11-17T21:11:00+00:00</updated>
    <id>https://blog.dlecan.com//meetup-blockchain-ethereum-a-z</id>
    <content type="html"><![CDATA[<p>Hier soir, j&#8217;ai eu le plaisir de pr√©senter avec <a href="https://twitter.com/guiillaumeN">GuiillaumeN</a> et <a href="https://twitter.com/benjifontaine5">Benjamin</a> notre conf√©rence &#8220;Ethereum, de A(lliance) √† Z(k-snarks)&#8221; au <a href="https://www.meetup.com/fr-FR/Blockchain-Societe-Nantes/events/244570850/">meetup de novembre</a> de l&#8217;association <a href="https://blockchainsociete.org">Blockchain et Soci√©t√©</a>.</p>

<blockquote><p>Soir√©e sp√©ciale Ethereum, la Blockchain en pleine croissance !</p><p>Nous vous pr√©senterons tous les concepts de la plateforme :</p><p>- Origine, gouvernance, culture</p><p>- √âcosyst√®me et outils : Geth, Parity, Web3, Quorum, Mist &#8230;</p><p>- Roadmap : Homestead, Metropolis &#8230;</p><p>Nous finirons par une s√©ance de questions-r√©ponses. Par exemple : qu&#8217;est-ce que l&#8217;Ethereum Enterprise Alliance ? Que sont les hard-forks ? &#8230;</p></blockquote>


<p>Une belle soir√©e !</p>

<p>Les slides de notre pr√©sentation :</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTz2ykgmnij1V3v9prs07qepDMA5SligE55O3ikitVfD4H-aM-6tJ10JiuWU2y6Q3zfK8jxV2CqCK6Q/embed?start=false&loop=false&delayms=60000" frameborder="0" width="560" height="349" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Merci au public pr√©sent !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Smartphone et Blockchain' au Breizhcamp 2017]]></title>
    <link href="https://blog.dlecan.com//smartphone-blockchain-armes-revolution-massive/"/>
    <updated>2017-05-05T21:51:00+00:00</updated>
    <id>https://blog.dlecan.com//smartphone-blockchain-armes-revolution-massive</id>
    <content type="html"><![CDATA[<p>Les slides de la pr√©sentation &#8220;Smartphone et Blockchain, armes de r√©volution massive&#8221; que j&#8217;ai eu le plaisir co-animer avec <a href="https://twitter.com/guiillaumeN">GuiillaumeN</a> au <a href="http://www.breizhcamp.org/">Breizhcamp 2017</a>.</p>

<p><a href="https://the-blockchain-machine.github.io/breizhcamp2017_revolution-blockchain-mobile-android/"><img src="https://blog.dlecan.com//images/prez-smartphone-blockchain/cover.png" width="690" height="519"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction au langage de programmation Rust - Partie 3]]></title>
    <link href="https://blog.dlecan.com//introduction-rust-part-3/"/>
    <updated>2017-03-17T21:32:00+00:00</updated>
    <id>https://blog.dlecan.com//introduction-rust-part-3</id>
    <content type="html"><![CDATA[<blockquote><p>Initialement publi√© sur <a href="https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-3">https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-3</a></p></blockquote>

<p>Apr√®s avoir vu comment installer le compilateur Rust et Cargo, puis √©crit quelques lignes de code dans la <a href="https://blog.dlecan.com//introduction-rust-part-2/">seconde partie de cette introduction</a>, nous allons continuer dans cette troisi√®me partie √† faire √©voluer notre programme en d√©couvrant de nouvelles caract√©ristiques de Rust.</p>

<p>Avant de nous lancer, rappelez-vous, une nouvelle version de Rust est publi√©e toutes les six semaines ; il est donc tr√®s probable que la version que vous avez install√©e est d√©j√† obsol√®te.</p>

<p>Mettez √† jour Rustup lui-m√™me, puis ensuite Rust :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rustup self update // mise √† jour de Rustup
</span><span class='line'> ...
</span><span class='line'>$ rustup update // mise √† jour de tous les canaux de Rust install√©s</span></code></pre></td></tr></table></div></figure>


<p>Pensez √† effectuer r√©guli√®rement ces op√©rations : une version √† jour de Rust vous donne acc√®s √† de nouvelles fonctionnalit√©s et une meilleure compatibilit√© avec les librairies de la communaut√©.</p>

<h2><code>Struct</code> et <code>trait</code></h2>

<p>Notre programme des deux premi√®res parties √©tait structur√© de mani√®re proc√©durale. Nous allons lui donner une allure plus lisible et plus encapsul√©e, pour ne pas dire plus &#8220;objet&#8221;. Rust n‚Äôa pas pour autant des &#8220;classes&#8221; comme dans d‚Äôautres langages, mais des <code>struct</code> et des <code>trait</code>.</p>

<p>Comme leur nom l‚Äôindique, les struct sont des structures qui permettent de stocker un ensemble de donn√©es complexes ; on dira qu‚Äôune struct d√©finie un nouveau type. Notez qu‚Äôil n‚Äôy a pas de constructeur ou d‚Äôaccesseurs √† proprement parler comme dans d‚Äôautre langage, Rust reste tr√®s simple ici.</p>

<p>Faisons √©voluer notre programme en introduisant une <em>struct</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">struct</span> <span class="n">Division</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">numerateur</span><span class="o">:</span> <span class="k">i32</span><span class="p">,</span>
</span><span class='line'>  <span class="n">denominateur</span><span class="o">:</span> <span class="k">i32</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La structure peut-√™tre ensuite instanci√©e et ses propri√©t√©s manipul√©es :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">une_division</span> <span class="o">=</span> <span class="n">Division</span> <span class="p">{</span><span class="n">numerateur</span><span class="o">:</span> <span class="m">10</span><span class="p">,</span> <span class="n">denominateur</span><span class="o">:</span> <span class="m">12</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Une division ({} - {})&quot;</span><span class="p">,</span> <span class="n">une_division</span><span class="p">.</span><span class="n">numerateur</span><span class="p">,</span> <span class="n">une_division</span><span class="p">.</span><span class="n">denominateur</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Continuons notre logique d‚Äôencapsulation en ajoutant des m√©thodes √† notre structure. Ici, la syntaxe de Rust sort vraiment de l‚Äôordinaire. En effet, les m√©thodes ne sont pas ajout√©es directement dans le corps de la <em>struct</em>, mais d√©clar√©es o√π vous le souhaitez dans votre programme avec le mot-cl√© impl.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span> <span class="n">Division</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">calculer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">match</span> <span class="n">self</span><span class="p">.</span><span class="n">denominateur</span> <span class="p">{</span>
</span><span class='line'>            <span class="m">0</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Division par 0&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="m">1</span> <span class="o">=&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">numerateur</span><span class="p">,</span>
</span><span class='line'>            <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">numerateur</span> <span class="o">/</span> <span class="n">self</span><span class="p">.</span><span class="n">denominateur</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code de la m√©thode calculer est repris de la m√©thode <code>calculer_division</code> vu dans la pr√©c√©dente partie de cet article.</p>

<p>Il est tentant de penser qu‚Äôon peut faire n‚Äôimporte quoi, comme en Javascript, √† savoir rajouter des m√©thodes √† n‚Äôimporte quelle <em>struct</em>, √©crite par vous ou fournie par le langage. Par exemple, en Javascript, on peut rajouter des m√©thodes au prototype <code>String</code> et les utiliser comme des m√©thodes du langage (cette capacit√© est notamment utilis√©e par tous les polyfills).</p>

<p>En Rust, il est impossible d‚Äôajouter des m√©thodes √† n‚Äôimporte quelle <em>struct</em> ; les <code>impl</code> doivent √™tre d√©clar√©s dans le m√™me module (<code>crates</code> en Rust) que la <em>struct</em>.</p>

<p>Mettez √† jour votre programme Rust :</p>

<ul>
<li>d√©clarer le nouveau type <code>Division</code> √† l‚Äôaide d‚Äôune <em>struct</em></li>
<li>remplacer la d√©claration de la m√©thode statique <code>calculer_division</code> par une m√©thode <code>calculer</code> qui impl√©mente le type <code>Division</code> (attention √† la signature de la m√©thode <code>calculer</code>)</li>
<li>remplacer l‚Äôappel √† la m√©thode <code>calculer_division</code> par l‚Äôinstanciation du type <code>Division</code> avec le param√®tre qui vient de l‚Äôanalyse de la ligne de commande, puis calculer le r√©sultat et l‚Äôafficher.</li>
</ul>


<p>A ce stade, vous devez avoir un programme qui compile et s‚Äôex√©cute, ce que vous pouvez v√©rifier √† l‚Äôaide de la commande <code>cargo run 4</code> (code complet <a href="https://git.io/v1XJL">https://git.io/v1XJL</a>).</p>

<p>S‚Äôil n‚Äôexiste pas de &#8220;vrai&#8221; constructeur en Rust, les us et coutumes du langage encouragent cependant l‚Äôencapsulation de l‚Äôop√©ration d‚Äôinstanciation d‚Äôun type au sein d‚Äôune fonction statique d√©clar√©e dans l‚Äôimpl√©mentation de la struct elle-m√™me, nomm√©e par convention <code>new</code> et qui retourne √©videmment une instance de votre type. Ce qui donne pour <code>Division</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span> <span class="n">Division</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">new</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="k">i32</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Division</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Division</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">numerateur</span><span class="o">:</span> <span class="n">x</span><span class="p">,</span>
</span><span class='line'>            <span class="n">denominateur</span><span class="o">:</span> <span class="n">y</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pensez √† remplacer l‚Äôinstanciation manuelle de <code>Division</code> dans votre programme par l‚Äôusage de la fonction <code>new</code> (code complet <a href="https://git.io/v1XLo">https://git.io/v1XLo</a>).</p>

<p>Outre les <code>struct</code>, Rust propose un autre m√©canisme qui permet d‚Äôindiquer au compilateur les fonctionnalit√©s qu‚Äôun type doit obligatoirement fournir : les <code>trait</code>. Par exemple, si nous souhaitons constraindre la fa√ßon dont une Division doit d√©clarer le symbole qu‚Äôelle repr√©sente, nous pouvons d√©clarer le <em>trait</em> suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">trait</span> <span class="n">HasSymbol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">symbol</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les <em>traits</em> ressemblent aux interfaces Java ou C#, avec globalement les m√™mes caract√©ristiques :</p>

<ul>
<li>ensemble de fonctions que le type doit obligatoirement red√©finir</li>
<li>certaines fonctions peuvent avoir une impl√©mentation par d√©faut</li>
<li>un <em>trait</em> peut impl√©menter un autre <em>trait</em>, et donc &#8220;h√©riter&#8221; de ses caract√©ristiques (concr√®tement, il faudra impl√©menter les deux traits sur votre type)</li>
</ul>


<p>Impl√©mentons notre <em>trait</em> pour la <code>Division</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span> <span class="n">HasSymbol</span> <span class="k">for</span> <span class="n">Division</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">symbol</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;/&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="c1">// &quot;/&quot; est du type &amp;str, qu&#39;il faut donc convertir</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notez ce point important, impossible en Java par exemple : impl√©menter un <em>trait</em> pour un type est une section de code d√©clar√©e a posteriori de la d√©claration de ce type, ce qui veut dire qu‚Äôun nouveau <em>trait </em>peut enrichir retrospectivement un type existant (avec quelques restrictions cependant).</p>

<p>D√©sormais, il est possible de tracer le symbole de la <code>Division</code>, juste apr√®s sa construction par exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">division</span> <span class="o">=</span> <span class="n">Division</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">numerateur</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Symbole : {}&quot;</span><span class="p">,</span> <span class="n">division</span><span class="p">.</span><span class="n">symbol</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le r√©sultat d‚Äôex√©cution de votre programme est d√©sormais enrichi du symbole de la Division (code complet <a href="https://git.io/v1X4I">https://git.io/v1X4I</a>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">$</span> <span class="n">cargo</span> <span class="n">run</span> <span class="m">2</span>
</span><span class='line'>    <span class="n">Running</span> <span class="err">`</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">division</span> <span class="m">2</span><span class="err">`</span>
</span><span class='line'><span class="n">Symbole</span><span class="o">:</span> <span class="o">/</span>
</span><span class='line'><span class="n">R</span><span class="err">√©</span><span class="n">sultat</span> <span class="o">:</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Encore quelques concepts √† ma√Ætriser par le Rustac√©en qui d√©bute</h2>

<p>Vous vous en souvenez peut-√™tre, je vous avais promis dans la premi√®re partie de cet article de la sueur, en particulier avec la gestion de la m√©moire : elle n‚Äôest ni √† la charge du d√©veloppeur, ni √† la charge d‚Äôune machine virtuelle et de son ramasse-miette.</p>

<p>Il est temps de mettre les mains dans le camboui et de transpirer. Accrochez-vous !</p>

<p>Reprenons le code d√©crit plus haut, et ajoutons-y une instruction qui para√Æt anodine :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">division</span> <span class="o">=</span> <span class="n">Division</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">numerateur</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'><span class="k">let</span> <span class="n">division2</span> <span class="o">=</span> <span class="n">division</span><span class="p">;</span> <span class="c1">// &lt;= instruction anodine :-)</span>
</span><span class='line'><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Symbole : {}&quot;</span><span class="p">,</span> <span class="n">division</span><span class="p">.</span><span class="n">symbol</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Que se passe-t-il √† la compilation (<code>cargo build</code>) ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0382</span><span class="p">]</span><span class="o">:</span> <span class="k">use</span> <span class="n">of</span> <span class="n">moved</span> <span class="n">value</span><span class="o">:</span> <span class="err">`</span><span class="n">division</span><span class="err">`</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">48</span><span class="o">:</span><span class="m">30</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="m">47</span> <span class="o">|</span>     <span class="k">let</span> <span class="n">division2</span> <span class="o">=</span> <span class="n">division</span><span class="p">;</span>
</span><span class='line'>  <span class="o">|</span>         <span class="o">---------</span> <span class="n">value</span> <span class="n">moved</span> <span class="n">here</span>
</span><span class='line'><span class="m">48</span> <span class="o">|</span>     <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Symbole : {}&quot;</span><span class="p">,</span> <span class="n">division</span><span class="p">.</span><span class="n">symbol</span><span class="p">());</span>
</span><span class='line'>  <span class="o">|</span>                              <span class="o">^^^^^^^^</span> <span class="n">value</span> <span class="n">used</span> <span class="n">here</span> <span class="n">after</span> <span class="n">move</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="k">note</span><span class="o">:</span> <span class="n">move</span> <span class="n">occurs</span> <span class="n">because</span> <span class="err">`</span><span class="n">division</span><span class="err">`</span> <span class="n">has</span> <span class="k">type</span> <span class="err">`</span><span class="n">Division</span><span class="err">`</span><span class="p">,</span> <span class="n">which</span>
</span><span class='line'>  <span class="n">does</span> <span class="n">not</span> <span class="n">implement</span> <span class="n">the</span> <span class="err">`</span><span class="n">Copy</span><span class="err">`</span> <span class="n">trait</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le compilateur Rust vous indique que la valeur point√©e par la variable division est d√©plac√©e (<em>moved</em>). En effet, une valeur ne peut √™tre r√©f√©renc√©e que par une seule variable dans tout notre code. C‚Äôest le concept de possession (<em>ownership</em>), contr√¥l√©e √† la lettre par le compilateur, qui va garantir la s√©curit√© et la robustesse d‚Äôex√©cution d‚Äôun programme Rust. Nous avons d√©plac√© la possession de la valeur de division vers division2, par cons√©quent, division ne peut plus √™tre utilis√©e.</p>

<p>Qui dit &#8220;possession&#8221;, dit &#8220;emprunt&#8221; (<em>borrowing</em>) ou &#8220;copie&#8221; et pour illustrer l‚Äôune ou l‚Äôautre des solutions, nous allons introduire une nouvelle fonction statique et l‚Äôutiliser (code complet <a href="https://git.io/v1X2m">https://git.io/v1X2m</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">display_symbol</span><span class="p">(</span><span class="n">division</span><span class="o">:</span> <span class="n">Division</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Symbole: {}&quot;</span><span class="p">,</span> <span class="n">division</span><span class="p">.</span><span class="n">symbol</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">let</span> <span class="n">division</span> <span class="o">=</span> <span class="n">Division</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">numerateur</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'><span class="n">display_symbol</span><span class="p">(</span><span class="n">division</span><span class="p">);</span> <span class="c1">// &lt;= √† la place du &#39;let division2 = ...&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce code ne compile pas et vous optenez un message d‚Äôerreur tr√®s similaire au pr√©c√©dent. Trois solutions pour r√©soudre cette erreur de compilation s‚Äôoffrent √† nous :</p>

<p>1/ Ne plus utiliser la variable division apr√®s l‚Äôappel √† la m√©thode <code>display_symbol</code></p>

<p>2/ Copier toute la valeur de la variable</p>

<p>3/ Permettre l‚Äôemprunt de la variable et utiliser sa r√©f√©rence</p>

<p>La solution 1/ est une fa√ßon de mettre le probl√®me sous le tapis ou de le repousser, ce n‚Äôest pas vraiment une solution (m√™me si le programme compilera effectivement üòâ</p>

<p>Copier toute la valeur de la variable (solution 2) est une fa√ßon int√©ressante de r√©soudre le probl√®me. Dans cette solution, la valeur de la variable est enti√®rement copi√©e lors de l‚Äôappel √† la fonction. Notez bien qu‚Äôil n‚Äôy a donc plus de lien entre la variable d√©clar√©e avant l‚Äôappel de la fonction et la variable utilis√©e dans la fonction.</p>

<p>Pour d√©clarer un type &#8220;copiable&#8221;, il suffit d‚Äôimpl√©menter le <em>trait</em> <code>Copy</code>, ainsi que le <em>trait</em> <code>Clone</code> dont h√©rite <code>Copy</code>. Le plus simple, est d‚Äôutiliser l‚Äôimpl√©mentation automatique de certains traits, propos√©e par l‚Äôattribut <code>#[derive(...)]</code> (documentation : <a href="https://bit.ly/2hASRHt">https://bit.ly/2hASRHt</a>), √† appliquer directement sur un type :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Copy, Clone)]</span>
</span><span class='line'><span class="n">Division</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec cet ajout, notre programme compile de nouveau (code complet <a href="https://git.io/v11tL">https://git.io/v11tL</a>). Cependant, si cette solution peut sembler magique et simple (et de plus propos√©e par le compilateur), elle a ausi ses limites :</p>

<ul>
<li>un type peut impl√©menter <code>Copy</code> uniquement si l‚Äôensemble de ses composants impl√©mente aussi <code>Copy</code> (dans notre exemple, <code>i32</code> impl√©mente <code>Copy</code>, donc <code>Division</code> peut impl√©menter <code>Copy</code>). Pour les Javaistes, on retrouve ici une propri√©t√© √©quivalente dans l‚Äôesprit aux objets s√©rialisables</li>
<li>un certain nombre de types n‚Äôimpl√©mentent pas <code>Copy</code> ; par oubli du d√©veloppeur ou par incompatibililt√© technique. Par exemple, les <code>String</code> ne sont pas compatibles avec <code>Copy</code>.</li>
</ul>


<p>La troisi√®me et derni√®re solution s‚Äôapplique donc √† tous les autres cas. Elle s‚Äôappuie sur le principe de l‚Äôemprunt, √† savoir qu‚Äôon va passer √† notre fonction non pas la valeur d‚Äôune variable, mais une r√©f√©rence vers la valeur de cette variable.</p>

<p>Concr√®tement, il faut faire √©voluer la signature de notre fonction d‚Äôaffichage pour permettre l‚Äôemprunt et l‚Äôusage de r√©f√©rence :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">display_symbol</span><span class="p">(</span><span class="n">division</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Division</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// &lt;= Notez le &amp; ici</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">let</span> <span class="n">division</span> <span class="o">=</span> <span class="n">Division</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">numerateur</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'><span class="n">display_symbol</span><span class="p">(</span><span class="o">&amp;</span><span class="n">division</span><span class="p">);</span> <span class="c1">// &lt;= Notez le &amp; ici</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>display_symbol</code> attend une r√©f√©rence vers un type <code>Division</code>, identifi√©e par le symbole <code>&amp;</code> et nous pouvons passer la r√©f√©rence vers une valeur en ajoutant le m√™me symbole devant le nom d‚Äôune variable (code complet <a href="https://git.io/v11ml">https://git.io/v11ml</a>). Cette solution est la plus universelle, au prix d‚Äôune complexit√© intellectuelle plus √©lev√©e.</p>

<p>Finalement, gr√¢ce √† ces diff√©rents m√©canismes, le cycle de vie de toutes les donn√©es r√©f√©renc√©es par des variables, est connu d√®s la compilation de votre programme, ce qui garantit une bonne gestion de la m√©moire et donc une certaine robustesse. En revanche, elle vous garantit aussi quelques &#8220;combats&#8221; contre le borrow checker du compilateur Rust.</p>

<h2>Conclusion</h2>

<p>Au cours de ces trois articles d‚Äôintroduction √† Rust, nous avons abord√©s les outils et les concepts les plus importants du langage : <em>struct</em>, <em>trait</em>, <em>pattern matching</em>, <em>enum</em>, possession (<em>ownership</em>), emprunt (<em>borrowing</em>), notions de programmation fonctionnelle &#8230; Ces connaissances devraient √™tre suffisantes pour √©crire vos premiers programmes avec Rust.</p>

<p>Vous d√©couvrirez par vous-m√™me des concepts plus avanc√©s du langage comme les <em>lifetimes</em>, les types g√©n√©riques, les modules et les <em>crates</em>, les <em>macros</em>, les tests, les it√©rateurs, la concurrence, la gestion des erreurs &#8230; La lecture du livre &#8220;The Rust programming language&#8221; sera donc √† ce propos un bon point de d√©part pour vous : <a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>. Enfin, tous ces concepts pourraient faire l‚Äôobjet d‚Äôarticles d√©di√©s, avis donc aux amateurs !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction au langage de programmation Rust - Partie 2]]></title>
    <link href="https://blog.dlecan.com//introduction-rust-part-2/"/>
    <updated>2017-03-14T14:21:00+00:00</updated>
    <id>https://blog.dlecan.com//introduction-rust-part-2</id>
    <content type="html"><![CDATA[<blockquote><p>Article initialement publi√© sur <a href="https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-2">https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-2</a></p></blockquote>

<p>Nous poursuivons notre d√©couverte du langage Rust apr√®s <a href="https://blog.dlecan.com//introduction-rust-part-1/">une premi√®re partie</a> dans laquelle vous avez pratiqu√© quelques concepts de base de Rust : √©l√©ments de syntaxe, d√©claration de variables immuables, fonctions et matching. Si la pratique de Rust directement dans le navigateur √©tait adapt√©e pour d√©buter, je vous propose d√©sormais de d√©velopper directement sur votre poste. Nous pourrons alors continuer √† explorer les possibilit√©s de Rust.
Installer Rust</p>

<p>Le site officiel <a href="https://www.rust-lang.org">https://www.rust-lang.org</a> propose des binaires ou des installeurs pour Linux, Mac ou Windows, qui ne se mettent pas √† jour automatiquement. Sachant qu‚Äôune nouvelle version du langage Rust et des outils est publi√©e toutes les six semaines et que l‚Äôon est r√©guli√®rement amen√© √† jongler entre les diff√©rents channels de Rust (stable, beta, nightly), je vous d√©conseille cette fa√ßon d‚Äôinstaller Rust.</p>

<p>Pr√©f√©rez plut√¥t l‚Äôusage de Rustup, le nouveau programme officiel d‚Äôinstallation de Rust (la page officielle de t√©l√©chargement commence aussi √† y faire r√©f√©rence). Vous trouvez la proc√©dure d‚Äôinstallation sur le site <a href="https://www.rustup.rs">https://www.rustup.rs</a>, √† savoir une simple commande √† taper dans une console : <code>curl https://sh.rustup.rs -sSf | sh</code>. Vous installez Rustup qui ensuite installe pour vous le compilateur Rust rustc, l‚Äôoutil de gestion de d√©pendances et de build cargo, ainsi que le d√©buggueur ou le formateur de code de la version stable courante de Rust. Vous pourrez tr√®s simplement mettre √† jour cette version stable avec rustup update quand vous en aurez besoin (toutes les six semaines !) ou bien installer la beta par exemple (rustup install beta).</p>

<p>Pr√©cis et efficace &#8230; quand vous avez curl et un interpr√©teur sh √† disposition, ce qui n‚Äôest pas le cas par d√©faut sous Windows. Si vous d√©veloppez avec Rust sous Windows, vous aurez, t√¥t ou tard, besoin aussi de Git pour versionner vos fichiers sources. Je vous recommande donc d‚Äôinstaller d‚Äôabord l‚Äôoutillage de Git qui vient avec une ligne de commande assez compl√®te et qui ressemble √† ce que vous pourriez obtenir sur un Linux : <a href="https://git-for-windows.github.io">https://git-for-windows.github.io</a>. T√©l√©chargez l‚Äôinstalleur 32 ou 64 bits selon votre machine, puis lancez la commande d‚Äôinstallation de Rustup dans le shell propos√© par Git for Windows.</p>

<p>A la fin de l‚Äôinstallation, en ligne de commande (sous Windows celle de Git for Windows, n‚Äôoubliez pas car je ne le r√©p√©terai plus :-), tapez :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rustc --version</span></code></pre></td></tr></table></div></figure>


<p>Si vous obtenez quelque chose comme <code>rustc 1.10.0 (cfcb716cf 2016-07-03)</code>, le compilateur Rust est op√©rationnel sur votre poste !</p>

<h2>Editeur de texte malin ou environnement de d√©veloppement int√©gr√© (IDE) ?</h2>

<p>Autant vous le dire d‚Äôembl√©e, les &#8220;assistants&#8221; de d√©veloppement Rust sont loin d‚Äô√™tre du niveau de ce que l‚Äôon peut trouver dans d‚Äôautres langages comme Java ou .Net. Il y a encore beaucoup de travail √† faire mais on arrive tout m√™me √† se cr√©er un environnement acceptable. Personnellement, je travaille avec Sublime Text, compl√©t√© par quelques plugins qui me permettent d‚Äôavoir la coloration syntaxique, le formatage et le linting, une validation moins pr√©cise de la syntaxe. Je vous invite √† consulter areweideyet.com pour choisir l‚Äôenvironnement le plus adapt√© √† votre contexte : Vim, Emacs, Atom, Visual Studio, Eclipse &#8230; ou simplement, si vous souhaitez aller vite, un √©diteur de texte type Notepad++, Geany ou Sublime Text seront suffisants.</p>

<h2>Calculer division : reboot</h2>

<p>Vous souvenez-vous de votre premier programme Rust √©crit dans la premi√®re partie de ce dossier ? Nous allons le revisiter avec les nouveaux outils dont nous nous sommes dot√©s, et en particulier cargo. C‚Äôest un mix de Maven pour la structure standard des projets Rust, de npm pour la gestion de d√©pendances ou l‚Äôinstallation d‚Äôun programme et de commandes permettant de g√©rer un projet Rust.</p>

<p>Cr√©ons-en un de type &#8220;programme Rust&#8221; (gr√¢ce au param√®tre <code>--bin</code>) :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cargo new --bin division</span></code></pre></td></tr></table></div></figure>


<p>Avec votre √©diteur de texte, copiez-collez le contenu de notre dernier programme dans le fichier src/main.rs du r√©pertoire division cr√©√© par Cargo :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">calculer_division</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="k">i32</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">i32</span>  <span class="p">{</span>
</span><span class='line'>    <span class="n">match</span> <span class="n">y</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">0</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Division par 0&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="m">1</span> <span class="o">=&gt;</span> <span class="n">x</span><span class="p">,</span>
</span><span class='line'>        <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">resultat</span> <span class="o">=</span> <span class="n">calculer_division</span><span class="p">(</span><span class="o">-</span><span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;R√©sultat : {}&quot;</span><span class="p">,</span> <span class="n">resultat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code complet sur ce Gist : <a href="https://git.io/vKcsS">https://git.io/vKcsS</a>. Sauvegardez, puis lancez en ligne de commande :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">$</span> <span class="n">cargo</span> <span class="n">run</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Compiling</span> <span class="n">division</span> <span class="n">v0</span><span class="p">.</span><span class="m">1.0</span> <span class="p">(</span><span class="n">file</span><span class="o">:</span><span class="c1">//.../division)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Running</span> <span class="err">`</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">division</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="n">R</span><span class="err">√©</span><span class="n">sultat</span> <span class="o">:</span> <span class="o">-</span><span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cargo compile et lance √† la suite le programme sans argument. Si vous souhaitez simplement compiler, lancez cargo build et si vous souhaitez lancer le programme vous-m√™me, sachez qu‚Äôil se trouve dans le r√©pertoire target/debug :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">$</span> <span class="p">.</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">division</span>
</span><span class='line'>
</span><span class='line'><span class="n">R</span><span class="err">√©</span><span class="n">sultat</span> <span class="o">:</span> <span class="o">-</span><span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Une API s√ªre</h2>

<p>Nous allons variabiliser le num√©rateur de notre division et le passer en param√®tre de la ligne de commande. Explorons l‚ÄôAPI de Rust pour ce besoin : lire les arguments en param√®tre du programme s‚Äôeffectue gr√¢ce √† une fonction du module std::env d√©clar√©e comme ceci (Cf. <a href="https://doc.rust-lang.org/std/env/fn.args.html">https://doc.rust-lang.org/std/env/fn.args.html</a>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">pub</span> <span class="k">fn</span> <span class="n">args</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Args</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>std::env::args()</code> nous renvoie donc une instance de la <em>struct</em> <code>Args</code> (elle-m√™me dans le module <code>std::env</code>), une structure qui va contenir des champs et des m√©thodes permettant de manipuler les arguments du programme, et ce de mani√®re s√ªre. Qu‚Äôest-ce que cela signifie ? S√ªr implique par exemple le bannissement de la &#8220;nullit√©&#8221;, source de fr√©quentes erreurs d‚Äôex√©cution (le fameux <em>NullPointerException</em> en Java par exemple). En Rust, toutes les API sont con√ßues pour renvoyer quelque chose -un r√©sultat ou une erreur- et m√™me &#8220;rien&#8221; est quelque chose en Rust.</p>

<h2><code>Option</code> - <code>Some</code> - <code>None</code></h2>

<p>Regardons la d√©claration de la fonction nth de Args qui va nous permettre de r√©cup√©rer le ni√®me argument de notre programme. Elle est d√©clar√©e comme ceci (la signature est l√©g√®rement adapt√©e pour une compr√©hension plus ais√©e) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">nth</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="o">:</span> <span class="n">usize</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Option</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mettons de cot√© le &amp;mut self, nous y reviendrons par la suite. nth est une fonction qui renvoie un Option de type String. Option est une √©num√©ration Rust √† deux variantes possibles :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">pub</span> <span class="k">enum</span> <span class="n">Option</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">None</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Some</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous substituez le type g√©n√©rique <code>T</code> par <code>String</code>, vous comprenez alors que la m√©thode <code>nth</code> peut renvoyer soit <code>None</code>, qui signifie qu‚Äôil y a pas de valeur √† cette position, soit <code>Some(String)</code>, qui signifie qu‚Äôil existe une valeur √† la position demand√©e et quelle peut √™tre extraite de la valeur de l‚Äô√©num√©ration. Ce qui est g√©nial, c‚Äôest que ces variantes peuvent √™tre &#8220;match√©es&#8221; (Cf. partie 1 de ce dossier) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">numerateur</span> <span class="o">=</span> <span class="n">match</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">nth</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Some</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">argument</span><span class="p">,</span>
</span><span class='line'>    <span class="n">None</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Argument obligatoire manquant : le num√©rateur&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ici, on effectue aussi du pattern matching pour extraire la valeur contenue dans le <code>Some</code>. <code>Some(argument)</code> permet de d√©clarer la variable argument, affect√©e √† la valeur contenu dans le <code>Some</code>, que l‚Äôon peut alors renvoyer (avec un <code>return</code> implicite). On arr√™te le programme pr√©matur√©ment avec la macro <code>panic!</code> et un message explicite en cas de <code>None</code>.</p>

<p>Enfin, cerise sur le g√¢teau, comme tout est expression en Rust, on peut affecter directement le retour de notre match √† une variable : <code>let numerateur = match env::args() ...</code>.</p>

<p>Notez l‚Äôutilisation du module env import√© par une ligne en d√©but de programme, <code>use std::env;</code>, √† ajouter pour chaque module utilis√© dans le programme.</p>

<p>Avec les <code>Option</code> et l‚ÄôAPI de Rust, nous avons pu extraire notre param√®tre de ligne de commande et l‚Äôavons rendu obligatoire. Ce n‚Äôest cependant pas suffisant : en effet, la fonction <code>nth</code> renvoie un <code>Option&lt;String&gt;</code> dans notre cas, ce qui veut dire que la variable numerateur ci-dessus est de type <code>String</code>, alors que nous attendons un <code>i32</code>. Il faut donc convertir notre valeur.</p>

<h2><code>Result</code> - <code>Ok</code> - <code>Err</code></h2>

<p>Rust propose une API de conversion de <code>String</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">parse</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">F</span><span class="p">,</span> <span class="n">F</span><span class="o">::</span><span class="n">Err</span><span class="o">&gt;</span> <span class="n">where</span> <span class="n">F</span><span class="o">:</span> <span class="n">FromStr</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prenons quelques instants pour comprendre la signature de cette fonction :</p>

<ul>
<li><code>fn parse</code> : &#8220;parse&#8221; est le nom de la fonction :-)</li>
<li><code>F</code> : il s‚Äôagit d‚Äôun type g√©n√©rique, que vous pouvez substituer mentalement par le type que vous voulez obtenir apr√®s le parsing de votre <code>String</code>
La d√©finition en est donn√©e en fin de ligne, <code>where F: FromStr</code>, ce qui signifie que <code>F</code> doit respecter le contrat d√©crit dans le <em>trait</em> <code>std::str::FromStr</code> (c‚Äôest une sorte d‚Äôinterface)</li>
<li><code>&amp;self</code> : il s‚Äôagit de la syntaxe sp√©cifique √† Rust qui indique que cette fonction n‚Äôest pas statique et qu‚Äôelle s‚Äôapplique sur des instances de l‚Äôobjet courant (<code>String</code> ici)</li>
<li><code>Result&lt;F, F::Err&gt;</code> : le type de retour, encapsulant <code>F</code> et un type d‚Äôerreur associ√©e √† <code>F</code></li>
</ul>


<p><code>Result</code> est la fa√ßon √©l√©gante en Rust de g√©rer les √©ventuels retours en erreur d‚Äôun traitement. Il est d√©crit comme ceci dans l‚ÄôAPI de Rust :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">pub</span> <span class="k">enum</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Ok</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
</span><span class='line'>  <span class="n">Err</span><span class="p">(</span><span class="n">E</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un peu comme <code>Option</code> vue pr√©c√©demment, <code>Result</code> est une √©num√©ration √† deux variantes, sur lesquelles on pourra <em>matcher</em> :</p>

<ul>
<li><code>Ok</code> est utilis√© pour encapsuler le r√©sultat d‚Äôun traitement qui s‚Äôest bien d√©roul√©</li>
<li><code>Err</code> permet de propager les erreurs de traitement</li>
</ul>


<p>Il n‚Äôy a donc pas d‚Äôexception en Rust et l‚Äôusage des codes retours pour indiquer un r√©sultat de traitement est consid√©r√© comme une mauvaise pratique, car non s√ªre.</p>

<p>Le type <code>i32</code> impl√©mentant bien le <em>trait</em> <code>std::str::FromStr</code>, on pourrait √©crire la fonction d√©di√©e au parsing d‚Äôune <code>String</code> en <code>i32</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">parse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Result</span><span class="o">&lt;</span><span class="k">i32</span><span class="p">,</span> <span class="n">ParseIntError</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>L‚Äôassociation de <code>ParseIntError</code> √† <code>i32</code> est d√©crite dans sa documentation (cherchez <code>impl FromStr for i32</code> et juste en dessous le type <code>Err = ParseIntError</code>).</p>

<p>Gardez en t√™te que c‚Äôest une simple vue de l‚Äôesprit, car elle est redondante avec la d√©finition de la fonction d√©crite avec un type g√©n√©rique, mais elle permet de fixer les id√©es quand on n‚Äôest pas encore √† l‚Äôaise avec la syntaxe de Rust.</p>

<p>Nous pouvons donc convertir notre <code>String</code> numerateur en <code>i32</code> apr√®s un <em>matching</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">numerateur</span> <span class="o">=</span> <span class="n">match</span> <span class="n">numerateur</span><span class="p">.</span><span class="n">parse</span><span class="o">::&lt;</span><span class="k">i32</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Ok</span><span class="p">(</span><span class="n">numerateur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">numerateur</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Err</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Impossible de convertir notre argument. Raison: {}&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut un peu aider le compilateur car il ne peut pas deviner quelle conversion on souhaite appliquer. Pour cela, on utilise la syntaxe <em>turbofish</em>: <code>::&lt;&gt;</code>, qui permet de sp√©cifier le type de destination.</p>

<p>Si le <code>parse</code> s‚Äôest bien d√©roul√©, le matching sur <code>Ok</code> permet d‚Äôextraire le num√©rateur sous forme de <code>i32</code> d√©sormais ; sinon avec le matching sur <code>Err</code>, on arr√™te une nouvelle fois le programme avec un message d‚Äôerreur ad√©quat.</p>

<p>Enfin, substituez le premier param√®tre de l‚Äôappel de la fonction calculer_division par la variable numerateur (code complet : <a href="https://git.io/v6ypr">https://git.io/v6ypr</a>), compilez et ex√©cutez en une fois :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">$</span> <span class="n">cargo</span> <span class="n">run</span> <span class="m">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Compiling</span> <span class="n">division</span> <span class="n">v0</span><span class="p">.</span><span class="m">1.0</span> <span class="p">(</span><span class="n">file</span><span class="o">:</span><span class="c1">//.../division)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Running</span> <span class="err">`</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">division</span> <span class="m">4</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="n">R</span><span class="err">√©</span><span class="n">sultat</span> <span class="o">:</span> <span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bravo, en quelques lignes de code robustes, vous avez g√©r√©s la pr√©sence et l‚Äôabsence d‚Äôargument lors de l‚Äôex√©cution de notre programme et ce, de mani√®re plut√¥t √©l√©gante.</p>

<p>Ainsi se termine cette 2√® partie de notre dossier consacr√© √† Rust. <a href="https://blog.dlecan.com//introduction-rust-part-3/">Dans la prochaine partie</a>, le niveau de difficult√© montera d‚Äôun cran : il sera en effet temps de se confronter au <em>borrow checker</em> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction au langage de programmation Rust - Partie 1]]></title>
    <link href="https://blog.dlecan.com//introduction-rust-part-1/"/>
    <updated>2017-03-09T11:34:00+00:00</updated>
    <id>https://blog.dlecan.com//introduction-rust-part-1</id>
    <content type="html"><![CDATA[<blockquote><p>Article initialement publi√© sur <a href="https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-1">https://www.technologies-ebusiness.com/langages/introduction-a-rust-partie-1</a></p></blockquote>

<p>Rust est un jeune langage qui a pour ambition de se substituer au C/C++ en proposant de nouveaux paradigmes de programmation, une librairie standard de haut niveau et un √©cosyst√®me riche soutenu par une communaut√© tr√®s active.</p>

<p>Multiplateformes (syst√®mes d‚Äôexploitation ou architectures de processeurs) et pourvu de tous les concepts de programmation attendus pour un langage moderne (programmation orient√©e &#8220;objet&#8221;, programmation fonctionnelle, facilit√©s √† d√©velopper des programmes d‚Äôex√©cution concurrente), Rust a beaucoup d‚Äôatouts pour s√©duire.</p>

<p>Au travers de cette s√©rie d‚Äôarticles, nous allons d√©couvrir ensemble ce langage qui me para√Æt √™tre le plus excitant depuis ces derni√®res ann√©es.</p>

<h2>Gen√®se</h2>

<p>Avant de plonger dans le code, je vous propose de revenir sur les origines du langage. Elles remontent √† 2010 : Graydon Hoare, ing√©nieur chez Mozilla, r√©v√®le ses travaux sur Rust. A l‚Äô√©poque, le &#8220;march√©&#8221; des langages informatiques est un peu similaire √† aujourd‚Äôhui, √† savoir une domination de C/C++ et de Java, chacun cantonn√© √† ses domaines de pr√©dilection. En sch√©matisant, Java r√®gne sur l‚Äôinformatique de &#8220;gestion&#8221; (syst√®mes d‚Äôinformation bancaires, assurance &#8230;) ainsi que sur Android, tandis que C/C++ est le choix par d√©faut de la programmation que je qualifierais de &#8220;syst√®me&#8221; ou &#8220;bas niveau&#8221; : syst√®me d‚Äôexploitation, pilotes, informatique embarqu√©e, machines virtuelles (Java lui- m√™me, ou NodeJS par exemple) &#8230;</p>

<p>Quelle caract√©ristique clivante peut bien isoler √† ce point ces deux mondes de l‚Äôinformatique ? Je pense qu‚Äôil s‚Äôagit principalement de la gestion de la m√©moire, qui diverge totalement. Avec Java, elle est en grande partie masqu√©e au d√©veloppeur, c‚Äôest-√†-dire que lorsqu‚Äôun d√©veloppeur cr√©e des objets en m√©moire, il n‚Äôa pas vraiment √† se soucier de son nettoyage. En effet, un processus qui s‚Äôex√©cute en arri√®re-plan, le ramasse-miette (garbage collector), se charge de d√©tecter les objets qui ne seraient plus utilis√©s et de les supprimer de la m√©moire. Le travail du d√©veloppeur est donc grandement simplifi√© et celui-ci peut se concentrer sur le code m√©tier le plus utile. C‚Äôest ce qui explique le succ√®s de tous les langages √† machine virtuelle et ramasse-miettes, comme Javascript ou .Net.</p>

<p>Si le fonctionnement du ramasse-miettes n‚Äôa pas ou peu de cons√©quences n√©gatives -largement compens√©es par d‚Äôautres avantages- dans les applications de haut niveau comme celles d√©di√©es au web, il est probl√©matique, voire r√©dhibitoire pour d‚Äôautres. La latence, certes r√©duite, induite par l‚Äôinitialisation ou le fonctionnement du ramasse-miettes, ne permet pas de construire des syst√®mes de plus bas niveau, comme les syst√®mes d‚Äôexploitation, les pilotes, les machines virtuelles elles-m√™mes ou encore des programmes en ligne de commandes efficaces &#8230; Dans ces cas, la m√©moire doit donc √™tre g√©r√©e &#8220;√† la main&#8221;.</p>

<p>En C/C++, la responsabilit√© du cycle de vie des structures ou objets en m√©moire incombe au d√©veloppeur et gare √† la qualit√© du logiciel si cette t√¢che est mal effectu√©e : corruption de donn√©es, plantages, failles de s√©curit√© &#8230; sont les cons√©quences principales d‚Äôune mauvaise gestion de la m√©moire, ph√©nom√®ne encore aggrav√© dans un contexte de programme √† ex√©cution concurrente. Ne jetons pas la pierre aux d√©veloppeurs : c‚Äôest une t√¢che ingrate, p√©nible et peu outill√©e. Alors dans ces conditions, comment produire des logiciels bas niveau de qualit√© ?</p>

<p>Depuis les premi√®res √©bauches, c‚Äôest pr√©cis√©ment l‚Äôun des objectifs du langages Rust. Il ne repose ni sur un ramasse-miettes (ex: Java), ni sur une gestion m√©moire manuelle du d√©veloppeur (ex: C/C++). Rust propose une nouvelle fa√ßon de g√©rer la m√©moire, qui se veut s√ªre et garantie √† la compilation, ce qui permet d‚Äôen limiter l‚Äôimpact sur les performances √† l‚Äôex√©cution. Autant vous pr√©venir tout de suite : la courbe d‚Äôapprentissage de Rust est donc plus lente que dans d‚Äôautres langages mais largement compens√©e en qualit√© et fiabilit√© des programmes produits. Concr√®tement, vous allez transpirer au d√©but mais serez fiers de la qualit√© de vos productions. Nous verrons par la suite comment elle se concr√©tise.</p>

<p>La syntaxe du langage, ainsi que la librairie standard, ont √©t√© d√©battues, test√©es, amend√©es par la -d√©j√† tr√®s active- communaut√©, pendant des ann√©es, la premi√®re version stable 1.0 de Rust ayant √©t√© publi√©e en avril 2015. Ce d√©lai a permis aussi de mettre en place une gouvernance ouverte et transparente qui r√©git l‚Äô√©volution du langage, √† laquelle chacun peut participer (board central, RFC ouvertes &#8230;). Trois channels de Rust sont √©dit√©s en parall√®le : nightly, beta et stable. De nouvelles versions de Rust stable et beta sont publi√©es toutes les 6 semaines, apportant √† chaque fois leurs lots d‚Äô√©volutions au langage.</p>

<p>Avant de d√©marrer, soyez attentifs lors de vos recherches sur Internet √† la version de Rust concern√©e par les articles de blogs ou les solutions apport√©es sur Stack Overflow. On y trouve en effet beaucoup de contenus obsol√®tes, car applicables √† des versions de Rust ant√©rieures √† la version 1.0.</p>

<p>Enfin, un mot sur la communaut√© de d√©veloppeurs Rust. Elle est accueillante et bienveillante, vous trouverez de nombreux d√©veloppeurs pr√™ts √† vous aider, √† vous faire progresser ainsi qu‚Äô√† critiquer votre code de mani√®re constructive. Une bonne surprise et une des forces de ce langage.</p>

<h2>Bonjour lecteurs !</h2>

<p>Commen√ßons √† √©crire quelques lignes de code, sans installation pr√©alable de Rust sur votre poste. Rendez-vous sur <a href="https://play.rust-lang.org/">https://play.rust-lang.org/</a> pour ouvrir l‚Äôinterpr√©teur web Rust, qui fonctionne tr√®s bien sur smartphone ou tablette. Id√©al pour tester simplement Rust sans vous prendre la t√™te ! Ne modifiez pas le param√©trage par d√©faut de la page (boutons du haut) et concentrez-vous sur la zone de texte centrale : c‚Äôest l√† qu‚Äôil faut taper le code Rust.</p>

<p>Lors de votre premi√®re connexion, le formulaire est d√©j√† pr√©initialis√© avec un morceau de code que je vous propose de substituer par un contenu plus adapt√© √† notre contexte :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="s">&quot;Bonjour Programmez!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous avez des difficult√©s √† saisir ce code, vous pouvez ouvrir directement cette URL : https://is.gd/JzBaCy. Par la suite, je pr√©senterai syst√©matiquement un lien vers le code pr√©sent√©, vous permettant √©ventuellement de le copier/coller.</p>

<p>Cliquez ensuite sur le gros bouton rouge &#8220;Run&#8221; en haut pour ex√©cuter ce programme. Vous devez alors obtenir sous la zone de texte de code l‚Äôaffichage de &#8220;Bonjour Programmez!&#8221;. Bravo, vous venez d‚Äô√©crire votre premier programme Rust !</p>

<h2>Analysons ensemble ces quelques lignes</h2>

<p>La syntaxe s‚Äôinspire fortement du langage C (que l‚Äôon retrouve en Java, Javascript, .Net &#8230;) et le formatage du code est standardis√© par le langage : indentation, espaces, positions des accolades &#8230; Notez le bouton &#8220;Format&#8221; dans l‚Äôinterpr√©teur Web qui formate le code de la zone de texte comme on peut s‚Äôy attendre üôÇ</p>

<ul>
<li><code>fn</code> permet de d√©clarer une fonction, nomm√©e ici main et sans argument. Par convention, c‚Äôest le point d‚Äôentr√©e unique d‚Äôun programme √©crit en Rust</li>
<li><code>println!</code> permet d‚Äô√©crire dans la sortie standard, du texte ou des structures plus complexes. Notez le <code>!</code> qui signifie que <code>println!</code> est une macro. C‚Äôest une routine de g√©n√©ration de code <strong>√† la compilation</strong> et un pattern de d√©veloppement tr√®s utilis√© par les d√©veloppeurs Rust pour masquer une complexit√©</li>
</ul>


<p>Je vous recommande l‚Äôutilisation de <code>println!</code> √† deux arguments et plus, syntaxe famili√®re √† ceux qui connaissent les fonctions <code>printf/fprintf</code> du C ou <code>str.format</code> de Python : le 1er param√®tre repr√©sente la mise en forme, les suivants les valeurs √† substituer aux <code>{}</code> pr√©sents dans le contenu du 1er argument (plus de d√©tails sur <a href="https://doc.rust-lang.org/std/fmt/">https://doc.rust-lang.org/std/fmt/</a>)</p>

<ul>
<li><code>;</code> obligatoire en fin de ligne la plupart du temps en Rust</li>
</ul>


<p>Modifions maintenant notre programme en d√©clarant une variable (<a href="https://is.gd/SIDHI3">https://is.gd/SIDHI3</a>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">une_chaine</span> <span class="o">=</span> <span class="s">&quot;Bonjour Programmez!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">une_chaine</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les variables se d√©clarent avec le mot-cl√© <code>let</code>, sont immuables (que l‚Äôon ne peut pas r√©affecter) et sont fortement typ√©es. Pourtant vous remarquerez que nous n‚Äôavons pas d√©clar√© le type de cette variable. En effet, Rust met en ≈ìuvre de l‚Äôinf√©rence de type, √† savoir qu‚Äôil tente de d√©tecter le type des variables mais pas des param√®tres. Un all√®gement significatif de la syntaxe qui facilite l‚Äô√©criture et la relecture. Il faudra cependant parfois l‚Äôaider √† deviner correctement le type. Remarquez enfin la syntaxe de type <em>snake case</em>, avec des <code>_</code> pour s√©parer les concepts dans les noms des variables (par opposition √† la syntaxe <em>camel case</em>: <code>uneVariable</code>). Pratique, car le compilateur r√¢lera si vous ne respectez pas cette convention.</p>

<p>Lancez avec &#8220;Run&#8221; pour compiler et ex√©cuter ce code.</p>

<p>Poursuivons la d√©couverte des concepts de Rust en introduisant une nouvelle fonction qui permet d‚Äôeffectuer la division d‚Äôun nombre par un autre :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">calculer_division</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="k">i32</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">i32</span>  <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Num√©rateur: {}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;D√©nominateur: {}&quot;</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>L‚Äôappel de la fonction que nous venons de d√©clarer s‚Äôeffectue exactement comme l‚Äôon s‚Äôy attend (programme complet : <a href="https://is.gd/0U61pa">https://is.gd/0U61pa</a>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">resultat</span> <span class="o">=</span> <span class="n">calculer_division</span><span class="p">(</span><span class="o">-</span><span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;R√©sultat : {}&quot;</span><span class="p">,</span> <span class="n">resultat</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par choix, il n‚Äôy a pas d‚Äôinf√©rence de type en Rust lors de la d√©claration des fonctions : les types des param√®tres d‚Äôentr√©e et du retour doivent √™tre explicitement sp√©cifi√©s. Le type des arguments est indiqu√© apr√®s chaque nom de variable suivi de : et le type de retour est sp√©cifi√© apr√®s la fl√®che <code>-&gt;</code>. Rust propose une liste de types primitifs tr√®s compl√®te, puisque vous avez par exemple la possibilit√© de choisir des entiers, des flottants sign√©s ou non sign√©s, des entiers ou des flottants de &#8220;longueur&#8221; variable.</p>

<p>Exemples :</p>

<ul>
<li><p><code>u8</code> : est un nombre de longueur 8 octets uniquement positif, donc un nombre compris entre 0 et 255 (2‚Å∏-1)</p></li>
<li><p><code>i16</code> : est un nombre de longueur 16 octets, positif ou n√©gatif, donc un nombre compris entre -32 768 (-2<sup>16/2)</sup> et 32 767 (2<sup>16/2-1)</sup></p></li>
</ul>


<p>Je vous conseille d‚Äôexplorer la liste compl√®te des types primitifs pour vous faire une id√©e des autres types disponibles (<a href="https://doc.rust-lang.org/book/primitive-types.html">https://doc.rust-lang.org/book/primitive-types.html</a>).</p>

<p>Les plus attentifs d‚Äôentre vous aurons remarqu√© que cette fonction ne &#8220;retourne&#8221; explicitement rien compar√© √† d‚Äôautres langages et que la derni√®re ligne ne se termine pas par un point-virgule, alors que l‚Äôon a pr√©c√©demment vu qu‚Äôil √©tait obligatoire. En Rust, il y a un return implicite sur la derni√®re expression ex√©cut√©e d‚Äôune fonction. Attention, ce n‚Äôest pas n√©cessairement la derni√®re ligne de code de la fonction. Dans l‚Äôexemple ci-dessous, il y a 2 fa√ßons de sortir de la fonction et aucune d‚Äôentre elles ne correspond √† la derni√®re ligne de code de la fonction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">calculer_division</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="k">i32</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">i32</span>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">y</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Division par 0&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple complet : <a href="https://is.gd/9LKj2d">https://is.gd/9LKj2d</a>.</p>

<p>A propos du point-virgule, dans notre cas ici qui semble manquant, vous ne devez pas en mettre en fin de ligne. Essayez, vous aurez une erreur de compilation ! Pourquoi ? Rust est un langage bas√© sur les expressions et non sur des d√©clarations. Cela signifie que tout renvoie quelque chose : assigner une variable renvoie quelque chose, if renvoie quelque chose &#8230; L‚Äôexpression <code>x / y</code> renvoie le r√©sultat de la division, compatible avec le type <code>i32</code>, l√† o√π l‚Äôexpression <code>x / y;</code> un r√©sultat dont le type est <code>()</code>, incompatible avec <code>i32</code>.</p>

<p>Enfin, modifions une derni√®re fois notre programme pour induire une syntaxe plus habituelle pour les Rustac√©ens (traduction de <em>Rustaceans&#8221;, le nom officiel des d√©veloppeurs Rust) : le </em>matching*.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">calculer_division</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="k">i32</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">i32</span>  <span class="p">{</span>
</span><span class='line'>    <span class="n">match</span> <span class="n">y</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">0</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Division par 0&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="m">1</span> <span class="o">=&gt;</span> <span class="n">x</span><span class="p">,</span>
</span><span class='line'>        <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple complet : <a href="https://is.gd/X7889d">https://is.gd/X7889d</a>.</p>

<p>La syntaxe parle d‚Äôelle-m√™me, c‚Äôest simple √† comprendre. Le <code>match</code> permet de g√©rer plus de cas que ne peut le faire un simple if tout en rendant obligatoire le traitement du cas par d√©faut. Qui n‚Äôa jamais oubli√© un else ou un case default en Java, par exemple ? En Rust, c‚Äôest impossible car le compilateur s‚Äôassure que tous les cas possibles de matching sont bien d√©clar√©s et g√©r√©s par le d√©veloppeur. <code>_</code> signifie au compilateur &#8220;tous les autres cas de matching&#8221; (dans notre cas, &#8220;tout sauf 0 et 1&#8221;). Sachez aussi que le matching offre aussi beaucoup plus de possibilit√©s que ne montre ce simple exemple.</p>

<p>Ici se termine la 1√®re partie de cette introduction √† Rust. Je vous invite √† poursuivre la lecture de ce dossier avec <a href="https://blog.dlecan.com//introduction-rust-part-2/">la seconde partie</a>, dans laquelle vous installerez Rust et ses outils sur votre poste de d√©veloppement et d√©couvrirez d‚Äôautres concepts passionnants du langage, avec quelques notions de programmation fonctionnelle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to configure Docker DNS on Ubuntu in a corporate environment?]]></title>
    <link href="https://blog.dlecan.com//how-to-configure-docker-dns-on-ubuntu-in-a-corporate-environment/"/>
    <updated>2016-11-24T22:17:00+00:00</updated>
    <id>https://blog.dlecan.com//how-to-configure-docker-dns-on-ubuntu-in-a-corporate-environment</id>
    <content type="html"><![CDATA[<p>When you are in a corporate environment, network is often configured to restrict outgoing requests, such as DNS resolution requests. By default, Docker uses Google DNS (8.8.8.8 and 8.8.4.4) to resolve domain names:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run busybox nslookup google.com
</span><span class='line'>Server:    8.8.8.8
</span><span class='line'>Address 1: 8.8.8.8
</span><span class='line'>nslookup: can't resolve 'google.com'</span></code></pre></td></tr></table></div></figure>


<p>If you are in a corporate environment, resolution fails because you have to use your internal DNS server.</p>

<p>You can find many, many documentation about how to configure Docker DNS on Ubuntu (such as official <a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/#/configure-a-dns-server-for-use-by-docker">Docker doc</a>), but none of them answer these requirements all together:</p>

<p>1/ Configuration must be portable: works at home or at work or anywhere else</p>

<p>2/ Configuration must be written in files not provided by a deb package to avoid conflicts after package updates</p>

<h2>Portable configuration</h2>

<p>Ubuntu provides Dnsmasq, a local DNS server configured to use DNS server of your network through DHCP. Docker can&#8217;t use it because it doesn&#8217;t allow to use a local DNS server if its IP address is a local configuration, such as <code>127.0.0.1</code>.</p>

<p>So we&#8217;ll configure Dnsmasq to listen to another available IP address, such as the one provided by <code>docker0</code> interface, to solve this issue.</p>

<p>Edit the new file <code>/etc/NetworkManager/dnsmasq.d/docker.conf</code> (as sudo):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface=docker0</span></code></pre></td></tr></table></div></figure>


<p>Then restart NetworkManager service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service network-manager restart</span></code></pre></td></tr></table></div></figure>


<h2>Configure Docker DNS</h2>

<p>Extract the IP address of the <code>docker0</code> interface:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker network inspect bridge | grep Gateway
</span><span class='line'>                    "Gateway": "172.17.0.1"</span></code></pre></td></tr></table></div></figure>


<p>Then edit <code>/etc/docker/daemon.json</code> (as sudo):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "dns": ["172.17.0.1"]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Restart Docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service docker restart</span></code></pre></td></tr></table></div></figure>


<p>Finally, check DNS resolution works again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run busybox nslookup google.com
</span><span class='line'>Server:    172.17.0.1
</span><span class='line'>Address 1: 172.17.0.1
</span><span class='line'>Name:      google.com
</span><span class='line'>Address 1: 2a00:1450:4009:811::200e lhr26s02-in-x200e.1e100.net
</span><span class='line'>Address 2: 216.58.198.174 lhr25s10-in-f14.1e100.net</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Du SSL gratuit pour tous' au Web2Day 2016]]></title>
    <link href="https://blog.dlecan.com//web2day-ssl-gratuit-pour-tous/"/>
    <updated>2016-06-17T18:24:00+00:00</updated>
    <id>https://blog.dlecan.com//web2day-ssl-gratuit-pour-tous</id>
    <content type="html"><![CDATA[<p>J&#8217;ai √©t√© retenu par la prestigieuse conf√©rence <a href="https://web2day.co">Web2Day</a> √† Nantes pour pr√©senter <a href="https://web2day.co/2016/evenements/du-ssl-gratuit-pour-tous/">&#8220;Du SSL gratuit pour tous&#8221;</a> en juin 2016, o√π je d√©montre comment tr√®s facilement configurer du TLS/SSL sur votre site web √† l&#8217;aide de la nouvelle autorit√© de certification <a href="https://letsencrypt.org/">Let&#8217;s Encrypt</a>, qui d√©livre gratuitement des certificats.</p>

<p>Merci !</p>

<p>Support de pr√©sentation :</p>

<p><a href="http://blog.dlecan.com/web2day2016-ssl-simple-gratuit-avec-lets-encrypt/"><img src="https://blog.dlecan.com//images/prez-web2day-lets-encrypt/cover.png" width="700" height="394" alt='Support de pr√©sentation de la conf√©rence'></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le Web s√©curis√© par d√©faut gr√¢ce √† DevOps et Let's Encrypt ? ]]></title>
    <link href="https://blog.dlecan.com//le-web-securise-par-defaut-grace-a-devops-et-let-s-encrypt/"/>
    <updated>2016-05-25T21:13:00+00:00</updated>
    <id>https://blog.dlecan.com//le-web-securise-par-defaut-grace-a-devops-et-let-s-encrypt</id>
    <content type="html"><![CDATA[<p><em><a href="http://www.journaldunet.com/solutions/expert/64185/le-web-securise-par-defaut-grace-a-devops-et-let-s-encrypt.shtml">Initialement publi√© sur le Journal Du Net</a></em>.</p>

<p><strong>L&#8217;acc√®s √† de nombreux sites Web n&#8217;est pas s√©curis√© pour plusieurs raisons : c&#8217;est compliqu√© et cher. Voyons comment les principes du DevOps et un coup de pouce de Let&#8217;s Encrypt pourraient nous conduire au Web s√©curis√© par d√©faut.</strong></p>

<p>Les principes du DevOps insistent fortement sur l&#8217;automatisation des processus de construction ou de d√©ploiement des syst√®mes informatiques. De nombreuses entreprises se sont empar√©es de ces nouveaux outils et les mettent en ≈ìuvre progressivement afin de livrer plus vite, au meilleur co√ªt, avec une qualit√© √©lev√©e, des fonctionnalit√©s √† forte valeur ajout√©e √† leurs clients et leurs utilisateurs.</p>

<p>La plupart des √©tapes du processus de construction des syst√®mes informatique sont en effet automatisables : construction et param√©trage des serveurs, construction des applications (serveur ou mobiles), ex√©cution des tests, livraison, d√©ploiement, gestion et prise en compte des pannes&#8230; La liste est chaque jour plus longue. Il reste pourtant un domaine o√π l&#8217;automatisation est faible voire inexistante : la s√©curit√© de l&#8217;acc√®s aux sites Internet. Or, le contexte actuel d&#8217;(in)s√©curit√© du Web en g√©n√©ral montre que la s√©curit√© ne doit plus √™tre sacrifi√©e sur l&#8217;autel de la complexit√© ou du prix.</p>

<h2>La s√©curit√© du Web</h2>

<p>Cette s√©curit√© repose sur des protocoles comme HTTPS, TLS, des algorithmes de chiffrement ou de hashage et au c≈ìur, des certificats X.509. La combinaison de ces √©l√©ments nous permet d&#8217;acc√©der √† des sites Internet de mani√®re s√©curis√©e (httpS://&#8230;), nous garantissant des √©changes de donn√©es chiffr√©es et donc illisibles pour tout tiers qui tenterait d&#8217;intercepter les donn√©es. Du moins, en th√©orie car les failles de s√©curit√©s des syst√®mes informatiques et le talent des pirates leur permettent quelquefois d&#8217;acc√©der √† des donn√©es confidentielles.</p>

<p>En pratique, la s√©curit√© repose sur d&#8217;autres concepts qui permettent de renforcer la s√©curit√© et de limiter les risques de piratage mais l&#8217;essentiel du processus repose sur les certificats de la norme X.509.</p>

<h2>Norm√©s certes, mais compliqu√©s et chers</h2>

<p><a href="https://fr.wikipedia.org/wiki/X.509">X.509</a> est une norme qui d√©finit entre autres les fameux certificats sur lesquels reposent HTTPS et TLS. Une chaine de confiance hi√©rarchique est √©tablie, dans laquelle des certificats particuliers -dits &#8220;racine&#8221;- signent et valident d&#8217;autres certificats. Les certificats racines sont g√©r√©s par des autorit√©s de certification qui sont responsables de l&#8217;√©mission de nouveaux certificats.</p>

<p>Les certificats racines sont directement embarqu√©s dans les navigateurs web, ce qui permet √† ces derniers d&#8217;ouvrir des connexions s√©curis√©es avec des sites web lorsqu&#8217;ils pr√©sentent un certificat d√©livr√© par une autorit√©s de certification reconnue.</p>

<p><em>Les certificats X.509 sont de bons concepts cryptographiques, qui pr√©sentent cependant des inconv√©nients majeurs.</em></p>

<p>1/ Ils sont compliqu√©s √† g√©rer. Un certificat doit √™tre d&#8217;abord g√©n√©r√©, ce qui requiert plusieurs √©tapes et fait intervenir plusieurs acteurs. L&#8217;utilisateur √©metteur doit g√©n√©rer une demande de signature de certificat (CSR) lors de laquelle il choisit un certain nombre de param√®tres, tels que la taille de la cl√© du certificat (il faut se tenir au courant des valeurs assurant un niveau de s√©curit√© ad√©quat, ce qui √©volue avec le temps) et un mot de passe optionnel qui sera requit √† chaque usage du certificat. Puis l&#8217;autorit√© de certification doit signer la demande et renvoyer le certificat √† l&#8217;√©metteur de la demande. Enfin, il faut configurer le site web avec le certificat re√ßu de l&#8217;autorit√© et d&#8217;autres param√®tres, ce qui est tout sauf √©vident : les serveurs web ne proposant que rarement une configuration simplifi√©e (des dizaines de param√®tres sont ajustables).</p>

<p>Un certificat a en outre une dur√©e de vie limit√©e -g√©n√©ralement entre 1 et 3 ans- et doit donc √™tre renouvel√© avant son expiration par un processus proche de sa g√©n√©ration initiale. Il faut alors de nouveau mettre √† jour la configuration du serveur.</p>

<p>Corollaire direct, g√©rer les certificats est long et lent. Comme le processus fait intervenir plusieurs acteurs, avec une complexit√© √©lev√©e et d&#8217;occurrence rare, pourquoi automatiser quelque chose qui se produit tr√®s rarement ? Les certificat sont donc dans la plupart des organisations g√©n√©r√©s et g√©r√©s manuellement et la difficult√© est √©lev√©e √† chaque fois qu&#8217;il faut les g√©n√©rer ou renouveler.</p>

<p>2/ Ils sont chers. Demander un certificat √† une autorit√© de certification publique est la plupart du temps payant (jusqu&#8217;√† plusieurs centaine d&#8217;euros par certificat).</p>

<p>Compte tenu de ces inconv√©nients, le choix des concepteurs de site web est donc radical : ils ne s√©curisent pas ou tr√®s peu quand ils ne peuvent pas faire autrement. Pourtant, l&#8217;acc√®s s√©curis√© √† un site web est d√©sormais essentiel ! <a href="https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html">Google favorise et privil√©gie</a> les sites Internet accessibles au travers de HTTPS en leur offrant un meilleur r√©f√©rencement sur son moteur de recherche. De nouveaux protocoles qui vont apporter de meilleures performances dans les usages mobiles comme HTTP/2, requi√®rent, aussi, obligatoirement HTTPS, donc TLS, donc des certificats.</p>

<h2>Des nouvelles autorit√©s de certification</h2>

<p>Revenons √† nos pratiques DevOps, et en particulier l&#8217;automatisation. Certains acteurs majeurs du Cloud ont bien compris la probl√©matique et proposent depuis quelques temps la gestion compl√®te des certificats, de leur cycle de vie et de leur configuration dans les serveurs web, sans (presque) aucune op√©ration manuelle ! (comme <a href="https://aws.amazon.com/fr/certificate-manager/">AWS certificate Manager</a>) Une raison de plus pour basculer dans le Cloud !</p>

<p>Pour les autres, une nouvelle autorit√© de certification r√©pond aux trois probl√©matiques expos√©es pr√©c√©demment : Let&#8217;s Encrypt. Let&#8217;s Encrypt est une autorit√© de certification <a href="https://letsencrypt.org/2016/04/12/leaving-beta-new-sponsors.html">officiellement op√©rationnelle depuis le 12 avril 2016</a>, avec comme principes cl√©s la gratuit√©, l&#8217;automatisation et la s√©curit√©. Le tout garanti par la transparence et l&#8217;ouverture de ses processus et de ses codes sources.</p>

<p>Comme toute autorit√© de certification, Let&#8217;s Encrypt d√©livre des certificats, les renouvelle mais aussi les configure sur les serveurs web, et ce automatiquement, sans autre intervention humaine que de fournir un param√©trage initial. Ensuite, les outils s&#8217;occupent de tout ! Et comme un bon processus est un processus r√©current fr√©quent, Let&#8217;s Encrypt force √† l&#8217;automatisation en g√©n√©rant des certificats √† dur√©e de vie extr√™mement courte : seulement trois mois, avec pr√©conisation de renouvellement au bout de deux mois. Impossible √† utiliser sans automatisation donc.</p>

<h2>Le Web s√©curis√© par d√©faut gr√¢ce aux principes DevOps ?</h2>

<p><a href="https://letsencrypt.org/sponsors/">De nombreuses entreprises et entit√©s soutiennent Let&#8217;s Encrypt</a>, financi√®rement et moralement, comme Mozilla, Akamai, Cisco, OVH, Google, Facebook, Gemalto, Gandi, Free, HP‚Ä¶ et l&#8217;usage des certificats √©mis par Let&#8217;s Encrypt se r√©pand comme une train√©e de poudre : <a href="https://letsencrypt.org/2016/03/08/our-millionth-cert.html">le cap du million de certificats g√©n√©r√©s</a> a √©t√© franchi en mars 2016 et la progression continue sur le m√™me rythme ; de plus en plus de services Internet proposent ou vont proposer tr√®s prochainement de s√©curiser les sites web de leurs utilisateurs au travers de Let&#8217;s Encrypt : Gandi, Free/Online, Wordpress, OVH, sans compter divers CDN (KeyCDN, Kloudsec, CDNSun ‚Ä¶).</p>

<p>L&#8217;usage simplifi√© promu par Let&#8217;s Encrypt n&#8217;est pas √©tranger √† cette adoption, qui sera sans nul doute, massive dans les ann√©es √† venir.
En effet, tout le monde y gagne :</p>

<ul>
<li>Les concepteurs de site : activation de la s√©curit√© de mani√®re simple, voire transparente, voire m√™me par d√©faut ; meilleur r√©f√©rencement aupr√®s de Google,</li>
<li>Les utilisateurs : garantie de confidentialit√© de leurs activit√©s sur de nombreux sites web ; en ce temps d&#8217;espionnage massif, c&#8217;est essentiel pour garantir la confiance,</li>
<li>Les services Internet d&#8217;h√©bergement de sites ou les CDN : c&#8217;est un service gratuit de plus √† offrir √† leur client et qui peut en attirer de nouveaux.</li>
</ul>


<p>Les autorit√©s de certification traditionnelles sont pour le moment relativement √©pargn√©es puisque que ce sont principalement des sites web qui n&#8217;√©taient pas auparavant s√©curis√©s qui basculent vers Let&#8217;s Encrypt. De plus, certains types de certificats ne sont actuellement pas pris en compte par Let&#8217;s Encrypt, ce qui continue de garantir leur monopole. Mais pour combien de temps ?</p>

<p><a href="https://blog.imirhil.fr/2015/12/12/letsencrypt-joie-deception.html">Certains consid√®rent cependant</a> que les choix effectu√©s par Let&#8217;s Encrypt vont √† l&#8217;encontre de l&#8217;√©l√©vation du niveau de s√©curit√© des sites web. Mais ce sont justement ces choix qui permettent et conduisent √† l&#8217;automatisation. Le web s√©curis√© par d√©faut n&#8217;a jamais √©t√© aussi proche gr√¢ce aux principes DevOps et √† Let&#8217;s Encrypt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tool In Action 'S√©curiser vos applications Web gratuitement' √† Devoxx 2016]]></title>
    <link href="https://blog.dlecan.com//devoxx-securiser-web/"/>
    <updated>2016-04-22T12:02:00+00:00</updated>
    <id>https://blog.dlecan.com//devoxx-securiser-web</id>
    <content type="html"><![CDATA[<p>J&#8217;ai √©t√© retenu par la prestigieuse conf√©rence <a href="https://devoxx.fr">Devoxx FR</a> pour d√©montrer les capacit√© de <a href="https://letsencrypt.org/">Let&#8217;s Encrypt</a> lors d&#8217;un <em>tool in action</em> <a href="http://cfp.devoxx.fr/2016/talk/WFF-3798/Securisez_vos_applications_Web_gratuitement_en_quelques_minutes_avec_Let's_Encrypt.html">&#8220;S√©curisez vos applications Web gratuitement en quelques minutes avec Let&#8217;s Encrypt&#8221;</a> en avril 2016, o√π je d√©montre comment tr√®s facilement configurer du TLS/SSL sur votre site web √† l&#8217;aide de cette nouvelle autorit√© de certification.</p>

<p>Elle d√©livre en effet gratuitement des certificats.</p>

<p>Merci !</p>

<p>La vid√©o de la session :</p>

<div class="embed-video-container"><iframe src="https://blog.dlecan.com///www.youtube.com/embed/hD4923vHXsY" allowfullscreen></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Go & Rust' au meetup SQLI Nantes 2015]]></title>
    <link href="https://blog.dlecan.com//meetup-sqli-nantes-2015-golang-rust/"/>
    <updated>2015-07-07T10:27:00+00:00</updated>
    <id>https://blog.dlecan.com//meetup-sqli-nantes-2015-golang-rust</id>
    <content type="html"><![CDATA[<p><a href="https://golang.org/">Go</a> et <a href="https://www.rust-lang.org/">Rust</a> font partie de ses &#8220;nouveaux&#8221; langages tr√®s exitants : √† la fois modernes mais aussi tr√®s puissants.
Je les ai pr√©sent√©s et compar√©s lors de ce meetup organis√© par <a href="http://www.sqli.com/">SQLI Nantes</a> en juillet 2015.</p>

<p>Support de pr√©sentation :</p>

<p><a href="http://blog.dlecan.com/meetupsqlinantes2015-prez/#2"><img src="https://blog.dlecan.com//images/prez-meetup-sqli-go-rust/cover.png" width="752" height="366" alt='Support de pr√©sentation de la conf√©rence'></a></p>

<p>La vid√©o (√† partir de 66&#8217; pour ma conf√©rence &#8220;Go &amp; Rust&#8221;) :</p>

<div class="embed-video-container"><iframe src="https://blog.dlecan.com///www.youtube.com/embed/OKg9gIs6W0Y" allowfullscreen></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redeemable promises avec Play Framework]]></title>
    <link href="https://blog.dlecan.com//redeemable-promises-avec-play-framework/"/>
    <updated>2014-11-15T22:34:00+00:00</updated>
    <id>https://blog.dlecan.com//redeemable-promises-avec-play-framework</id>
    <content type="html"><![CDATA[<p>J&#8217;ai eu √† intervenir r√©cemment sur un programme √©crit en Play Framework v2.3, dont le r√¥le est assez simple : faire passe-plat entre un client et un serveur et effectuant notamment des transformations protocolaires (comme REST vers TCP par exemple). Ce qui m&#8217;a donn√© l&#8217;occasion d&#8217;utiliser les <a href="https://www.playframework.com/documentation/2.4.x/api/java/play/libs/F.RedeemablePromise.html">RedeemablePromise</a> de Play Framework, pas du tout document√©es √† ce jour.</p>

<h2>Client asynchrone</h2>

<p>Les diff√©rents √©changes de messages entre les syst√®mes peuvent √™tre repr√©sent√©s √† l&#8217;aide du diagramme de s√©quence suivant :</p>

<p><img class="center" src="http://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgQ2xpZW50IGFzeW5jaHJvbmUKCgANBi0-UGFzc2VQbGF0OlBPU1QgbWVzc2FnZQoADgktPlNlcnZldXI6c2VuZAAXCQAOBy0ANQwgYWNrAC4LLT4AcQY6IDIwMAAXBQpub3RlIG92ZXIAgQsHLAB1CSwAXgggUGx1cyB0YXJkLCB1bgCBCAggZGUgcmV0b3VyCgByCQBuDHJlc3BvbnMAgSsNAHYIAIFTBQAYCQCBcQcAgSsNAIEYCACBMAwAgQcJYWNr&s=modern-blue"></p>

<p>Le programme en Play Framework est nomm√© &#8220;PassePlat&#8221; dans ce diagramme.</p>

<p>Les messages montants sont impl√©ment√©s sous forme d&#8217;une API RESTful ; tandis que le retour du &#8220;Serveur&#8221;, asynchrone, est impl√©ment√©e avec des <em>callbacks</em> et une requ√™te REST vers le client d&#8217;origine. Voici un exemple de pseudo-code Java sur le traitement du message de retour :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Receive responses from &quot;server&quot;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServerReceiver</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServerResponse</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Utilisation de la librairie play.libs.ws.WS</span>
</span><span class='line'>      <span class="c1">// pour effectuer des appels REST</span>
</span><span class='line'>      <span class="n">WS</span><span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">&quot;http://client_url/api/response&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">asJson</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServerError</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">WS</span><span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">&quot;http://client_url/api/response&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="c1">// Serialize exception as JSON</span>
</span><span class='line'>          <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">Helper</span><span class="o">.</span><span class="na">asJson</span><span class="o">(</span><span class="n">error</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le syst√®me complet fonctionne bien, mais n&#8217;est pas tr√®s satisfaisant :</p>

<ul>
<li><p>le Client et le PassePlat sont tr√®s coupl√©s. En effet, le Client doit conna√Ætre l&#8217;adresse du PassePlat pour lui envoyer les messages montants et le PassePlat doit connaitre l&#8217;adresse du Client pour lui renvoyer le message de retour. Bref, une d√©pendance cyclique ;</p></li>
<li><p>Le fonctionnement du Serveur est asynchrone (messages montants et de retours sont d√©corr√©l√©s) et cette impl√©mentation a d√©port√© l&#8217;asynchronisme jusqu&#8217;au Client, alors que le client (l&#8217;humain cette fois-ci :-) voulait plut√¥t un fonctionnement synchrone du Client, ce qui √©tait plus facile √† appr√©hender pour lui.</p></li>
</ul>


<h2>Client synchrone</h2>

<p>Nous avons donc travaill√©s sur une impl√©mentation du syst√®me plut√¥t comme ceci :</p>

<p><img class="center" src="http://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgQ2xpZW50IHN5bmNocm9uZQoKAAwGLT5QYXNzZVBsYXQ6UE9TVCBtZXNzYWdlCgAOCS0-U2VydmV1cjpzZW5kABcJAA4HLQA1DCBhY2sKCm5vdGUgb3ZlcgBuBywAWQksAEIIIFBsdXMgdGFyZCwgdW4AbAggZGUgcmV0b3VyCgBWCQBSDHJlc3BvbnMAgRAMLT4AgVMGOiAyMDAAGAkgKwCBBQUAgTATADsJQWNr&s=modern-blue"></p>

<p>L&#8217;appel du Client vers le PassePlat est donc bloqu√© tant que l&#8217;acquittement <strong>et</strong> la r√©ponse du Serveur ne sont pas parvenus au PassePlat.</p>

<h3>Comment ?</h3>

<p>On peut faire cela tr√®s simplement avec les <a href="https://www.playframework.com/documentation/2.4.x/api/java/play/libs/F.RedeemablePromise.html">RedeemablePromise</a> de Play Framework.</p>

<p>Les <a href="https://www.playframework.com/documentation/2.4.x/api/java/play/libs/F.RedeemablePromise.html">RedeemablePromise</a> sont une impl√©mentation du design pattern <em>promise</em>, d√©sormais r√©pandu dans l&#8217;informatique pour r√©soudre le <a href="http://callbackhell.com/"><em>callback hell</em></a> -l&#8217;enfer des callbacks-, probl√®me tr√®s fr√©quent avec la programmation asynchrone. En effet, votre code est ex√©cut√© au sein de <em>callbacks</em> en r√©ponse √† des √©v√®nements : fin de traitement, lecture d&#8217;un fichier, arriv√©e d&#8217;un message par Web Socket, &#8230;</p>

<p>On trouve des impl√©mentations de ce pattern naturellement en <a href="https://www.promisejs.org/">Javascript</a> (<a href="https://docs.angularjs.org/api/ng/service/$q">plusieurs m√™me</a>), mais aussi en <a href="http://docs.scala-lang.org/overviews/core/futures.html">Scala</a>, en <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">Java</a>, &#8230;</p>

<p>Voyons comment nous pouvons les utiliser pour r√©pondre √† notre nouveau besoin.</p>

<p>Adaptons la classe qui r√©ceptionne les √©v√®nements venant du Serveur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Receive responses from &quot;server&quot;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServerReceiver</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Initialisation de la promesse, √† vide</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">RedeemablePromise</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="n">promise</span> <span class="o">=</span> <span class="n">RedeemablePromise</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// get/set</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServerResponse</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// La promesse est r√©solue ou compl√©t√©e avec succ√®s ici</span>
</span><span class='line'>      <span class="n">promise</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServerError</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// La promesse est r√©solue ou compl√©t√©e en erreur avec l&#39;exception</span>
</span><span class='line'>      <span class="n">promise</span><span class="o">.</span><span class="na">failure</span><span class="o">(</span><span class="n">error</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;√©l√©ment cl√© ici est le fait de &#8220;r√©soudre&#8221; ou &#8220;compl√©ter&#8221; la promesse en succ√®s ou en erreur selon le cas. Attention √† n&#8217;oublier aucun cas de fin de traitement du Serveur, sinon le Client restera bloqu√© dans ces cas non pr√©vus.</p>

<p>Jetons maintenant un coup d&#8217;oeil au contr√¥leur REST sur le PassePlat qui re√ßoit les requ√™tes HTTP depuis le Client et qui &#8220;bloque&#8221; tant que la r√©ponse du Serveur n&#8217;est pas parvenue :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;</span> <span class="nf">sendMessage</span><span class="o">(...)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Envoi du message entrant vers le serveur</span>
</span><span class='line'>  <span class="c1">// server.send(message)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ServerReceiver</span> <span class="n">serverReceiver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerReceiver</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Ecoute des messages retour</span>
</span><span class='line'>  <span class="n">server</span><span class="o">.</span><span class="na">listen</span><span class="o">(</span><span class="n">serverReceiver</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>      <span class="c1">// Promesse de type Promise&lt;Response&gt;</span>
</span><span class='line'>      <span class="n">serverReceiver</span><span class="o">.</span><span class="na">getPromise</span><span class="o">()</span>
</span><span class='line'>      <span class="c1">// Conversion &#39;success&#39; en Promise&lt;Result&gt;</span>
</span><span class='line'>      <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="n">ok</span><span class="o">(</span><span class="n">JSON</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">response</span><span class="o">));</span>
</span><span class='line'>      <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le cas nominal, la <code>Response</code> sera convertie en <code>Result</code> au sein de la m√©thode <code>map</code> (programmation fonctionnelle).</p>

<p>Et dans le cas o√π la promesse a √©t√© r√©solue en erreur ?
Par d√©faut, Play va g√©n√©rer une r√©ponse HTTP avec un code retour 500 et une s√©rialisation de l&#8217;exception renvoy√©e. Si vous souhaitez d√©finir vous-m√™me votre propre retour, il faut que le traitement de l&#8217;erreur g√©n√®re un <code>Result</code> standard.</p>

<p>Voici comment adapter la transformation de la promesse pour renvoyer une erreur 500 et une s√©rialisation de l&#8217;exception en cas de promesse r√©solue en erreur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">return</span>
</span><span class='line'>  <span class="c1">// Promesse de type Promise&lt;Response&gt;</span>
</span><span class='line'>  <span class="n">promise</span>
</span><span class='line'>  <span class="c1">// Conversion &#39;success&#39; en Promise&lt;Result&gt;</span>
</span><span class='line'>  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">ok</span><span class="o">(</span><span class="n">Json</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">response</span><span class="o">));</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>  <span class="c1">// Conversion &#39;failure&#39; en Promise&lt;Result&gt;</span>
</span><span class='line'>  <span class="o">.</span><span class="na">recover</span><span class="o">(</span><span class="n">error</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="c1">// Serialize exception as JSON</span>
</span><span class='line'>      <span class="c1">// and send HTTP 500 status</span>
</span><span class='line'>      <span class="n">internalServerError</span><span class="o">(</span><span class="n">Json</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">error</span><span class="o">));</span>
</span><span class='line'>  <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au final, nous avons pu rendre l&#8217;appel du Client synchrone en √† peine quelques lignes de code gr√¢ce √† l&#8217;API riche de Play Framework.
Enfin, vous remarquerez que Java 8 am√©liore significativement la lisibilit√© du code. Cependant, on reste loin de Scala, de Groovy ou tout simplement de Javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Mozilla Geckoview' au Devfest Nantes 2014]]></title>
    <link href="https://blog.dlecan.com//mettez-panda-roux-dans-votre-webview-android/"/>
    <updated>2014-11-10T16:31:00+00:00</updated>
    <id>https://blog.dlecan.com//mettez-panda-roux-dans-votre-webview-android</id>
    <content type="html"><![CDATA[<p>J&#8217;ai eu le plaisir de participer √† cette superbe conf√©rence que fut le <a href="http://devfest.gdgnantes.com/">Devfest Nantes 2014</a>, √† la fois en tant que visiteur mais aussi en tant qu&#8217;orateur.</p>

<p>J&#8217;y ai pr√©sent√© la conf√©rence &#8220;Mettez un Panda Roux dans votre Webview&#8221;, dont voici le r√©sum√© :</p>

<blockquote><p>Au-del√† du simple navigateur pour Android, Firefox est aussi une plateforme d&#8217;ex√©cution d&#8217;applications HTML5 ouverte, les Open Web Apps.<br/>Apr√®s une pr√©sentation de Mozilla Geckoview et de ce qu&#8217;il peut apporter √† vos applications HTML5 sous Android par rapport √† une Webview standard (modernit√©, performances&#8230;), nous d√©taillerons l&#8217;initiative de Mozilla avec les Open Web Apps et verrons concr√®tement comment l&#8217;utiliser pour d√©ployer des applications HTML5 sous Android.</p></blockquote>


<p>Et le support de pr√©sentation :</p>

<p><a href="http://blog.dlecan.com/devfestnantes2014/prez-panda-roux-webview-android/"><img src="https://blog.dlecan.com//images/prez-panda-roux-webview-android/cover.png" width="768" height="432" alt='Support de pr√©sentation de la conf√©rence' target='_blank'></a></p>

<p>La vid√©o :</p>

<div class="embed-video-container"><iframe src="https://blog.dlecan.com///www.youtube.com/embed/SBzsADcBdBE" allowfullscreen></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conf√©rence 'Des libs Android pour un dev carr√©' au GDG Nantes]]></title>
    <link href="https://blog.dlecan.com//gdgnantes-2014-lib-android/"/>
    <updated>2014-06-17T09:34:00+00:00</updated>
    <id>https://blog.dlecan.com//gdgnantes-2014-lib-android</id>
    <content type="html"><![CDATA[<p>Le <a href="http://gdgnantes.com">GDG Nantes</a> m&#8217;a invit√© √† venir pr√©senter les fantastiques librairies de d√©veloppement Android de Square le 16 juin 2014 au soir.</p>

<p>Merci pour l&#8217;ap√©ro et pour le public !</p>

<p>Support de pr√©sentation :</p>

<p><a href="http://blog.dlecan.com/lib-android-dev-carre/prez/"><img src="https://blog.dlecan.com//images/prez-gdgnantes-2014-lib-android/cover.png" width="700" height="450" alt='Support de pr√©sentation de la conf√©rence'></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Versions of FreeFileSync available on Ubuntu via PPA installation]]></title>
    <link href="https://blog.dlecan.com//versions-of-freefilesync-available-on-ubuntu-via-ppa-installation/"/>
    <updated>2014-05-18T21:19:00+00:00</updated>
    <id>https://blog.dlecan.com//versions-of-freefilesync-available-on-ubuntu-via-ppa-installation</id>
    <content type="html"><![CDATA[<p>Author of <a href="http://freefilesync.sourceforge.net/">FreeFileSync</a> publishes <a href="http://www.fosshub.com/FreeFileSync.html">binaries</a> for Ubuntu for each release. But you have to install them again and again, once a month. That&#8217;s why I am the maintainer of <a href="https://launchpad.net/~freefilesync/+archive/ffs">FreeFileSync PPA</a>, the way in Ubuntu to distribute binaries with automatic updates.</p>

<p>As of May 2014, here are the FreeFileSync versions available for each Ubuntu series:</p>

<table>
<thead>
<tr>
<th>Ubuntu series </th>
<th align="center"> Last available version of FreeFileSync </th>
<th align="center"> Supported ? </th>
<th> Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>Natty         </td>
<td align="center"> 4.0                                    </td>
<td align="center"> No          </td>
<td></td>
</tr>
<tr>
<td>Oneiric       </td>
<td align="center"> 5.5                                    </td>
<td align="center"> No          </td>
<td></td>
</tr>
<tr>
<td>Precise       </td>
<td align="center"> 5.21                                   </td>
<td align="center"> No          </td>
<td> Requires newer libraries</td>
</tr>
<tr>
<td>Quantal       </td>
<td align="center"> 5.23                                   </td>
<td align="center"> No          </td>
<td> Requires newer libraries</td>
</tr>
<tr>
<td>Raring        </td>
<td align="center"> 5.23                                   </td>
<td align="center"> No          </td>
<td> Requires newer libraries</td>
</tr>
<tr>
<td>Saucy         </td>
<td align="center"> 6.0                                    </td>
<td align="center"> Could be if asked </td>
<td></td>
</tr>
<tr>
<td>Trusty        </td>
<td align="center"> 6.5                                    </td>
<td align="center"> Yes         </td>
<td></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>
